{"/home/travis/build/npmtest/node-npmtest-generator-jhipster/test.js":"/* istanbul instrument in package npmtest_generator_jhipster */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/lib.npmtest_generator_jhipster.js":"/* istanbul instrument in package npmtest_generator_jhipster */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_jhipster = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_jhipster = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-jhipster && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_jhipster */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_jhipster\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_jhipster.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_jhipster.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_jhipster.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_jhipster.__dirname + '/lib.npmtest_generator_jhipster.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/node_modules/generator-jhipster/generators/cleanup.js":"const constants = require('./generator-constants');\n\nconst ANGULAR_DIR = constants.ANGULAR_DIR;\nconst CLIENT_MAIN_SRC_DIR = constants.CLIENT_MAIN_SRC_DIR;\n\nmodule.exports = {\n    cleanupOldFiles,\n    cleanupOldServerFiles\n};\n/**\n * Removes files that where generated in previous JHipster versions and therefore need to be removed\n */\nfunction cleanupOldFiles(generator, javaDir, testDir) {\n    if (generator.isJhipsterVersionLessThan('3.2.0')) {\n        // removeFile and removeFolder methods should be called here for files and folders to cleanup\n        generator.removeFile(`${ANGULAR_DIR}components/form/uib-pager.config.js`);\n        generator.removeFile(`${ANGULAR_DIR}components/form/uib-pagination.config.js`);\n    }\n}\n\n/**\n * Removes server files that where generated in previous JHipster versions and therefore need to be removed\n */\nfunction cleanupOldServerFiles(generator, javaDir, testDir) {\n    if (generator.isJhipsterVersionLessThan('3.5.0')) {\n        generator.removeFile(`${javaDir}domain/util/JSR310DateTimeSerializer.java`);\n        generator.removeFile(`${javaDir}domain/util/JSR310LocalDateDeserializer.java`);\n    }\n    if (generator.isJhipsterVersionLessThan('3.6.0')) {\n        generator.removeFile(`${javaDir}config/HerokuDatabaseConfiguration.java`);\n    }\n    if (generator.isJhipsterVersionLessThan('3.8.1')) {\n        generator.removeFile(`${javaDir}config/JacksonConfiguration.java`);\n    }\n    if (generator.isJhipsterVersionLessThan('3.10.0')) {\n        generator.removeFile(`${javaDir}config/CloudMongoDbConfiguration.java`);\n        generator.removeFile(`${javaDir}security/CustomAccessDeniedHandler.java`);\n        generator.removeFile(`${javaDir}web/filter/CsrfCookieGeneratorFilter.java`);\n    }\n    if (generator.isJhipsterVersionLessThan('3.11.0')) {\n        generator.removeFile(`${CLIENT_MAIN_SRC_DIR}app/layouts/navbar/active-link.directive.js`);\n    }\n    if (generator.isJhipsterVersionLessThan('3.12.0')) {\n        generator.removeFile(`${javaDir}config/hazelcast/HazelcastCacheRegionFactory.java`);\n        generator.removeFile(`${javaDir}config/hazelcast/package-info.java`);\n    }\n    if (generator.isJhipsterVersionLessThan('4.0.0')) {\n        generator.removeFile(`${javaDir}async/ExceptionHandlingAsyncTaskExecutor.java`);\n        generator.removeFile(`${javaDir}async/package-info.java`);\n        generator.removeFile(`${javaDir}config/jHipsterProperties.java`);\n        generator.removeFile(`${javaDir}config/LoadBalancedResourceDetails.java`);\n        generator.removeFile(`${javaDir}config/ElasticSearchConfiguration.java`);\n        generator.removeFile(`${javaDir}config/apidoc/package-info.java`);\n        generator.removeFile(`${javaDir}config/apidoc/PageableParameterBuilderPlugin.java`);\n        generator.removeFile(`${javaDir}config/apidoc/SwaggerConfiguration.java`);\n        generator.removeFile(`${javaDir}config/jcache/SpringCacheRegionFactory.java`);\n        generator.removeFile(`${javaDir}config/jcache/SpringCacheRegionFactory.java`);\n        generator.removeFile(`${javaDir}config/liquibase/AsyncSpringLiquibase.java`);\n        generator.removeFile(`${javaDir}config/liquibase/package-info.java`);\n        generator.removeFile(`${javaDir}config/locale/AngularCookieLocaleResolver.java`);\n        generator.removeFile(`${javaDir}config/locale/package-info.java`);\n        generator.removeFile(`${javaDir}domain/util/FixedH2Dialect.java`);\n        generator.removeFile(`${javaDir}domain/util/FixedPostgreSQL82Dialect`);\n        generator.removeFile(`${javaDir}domain/util/JSR310DateConverters.java`);\n        generator.removeFile(`${javaDir}domain/util/JSR310PersistenceConverters.java`);\n        generator.removeFile(`${javaDir}security/AjaxAuthenticationFailureHandler.java`);\n        generator.removeFile(`${javaDir}security/AjaxAuthenticationSuccessHandler.java`);\n        generator.removeFile(`${javaDir}security/AjaxLogoutSuccessHandler.java`);\n        generator.removeFile(`${javaDir}security/CustomPersistentRememberMeServices.java`);\n        generator.removeFile(`${javaDir}security/Http401UnauthorizedEntryPoint.java`);\n        generator.removeFile(`${javaDir}security/UserDetailsService.java`);\n        generator.removeFile(`${javaDir}web/filter/CachingHttpHeadersFilter.java`);\n        generator.removeFile(`${javaDir}web/filter/package-info.java`);\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/node_modules/generator-jhipster/generators/generator-constants.js":"// version of docker images\nconst DOCKER_JHIPSTER_REGISTRY = 'jhipster/jhipster-registry:v2.6.0';\nconst DOCKER_JAVA_JRE = 'openjdk:8-jre-alpine';\nconst DOCKER_MYSQL = 'mysql:5.7.13'; // mysql.5.7.14+ doesn't work well with zoned date time, see https://github.com/jhipster/generator-jhipster/pull/4038\nconst DOCKER_MARIADB = 'mariadb:10.1.17';\nconst DOCKER_POSTGRESQL = 'postgres:9.6.2';\nconst DOCKER_MONGODB = 'mongo:3.2.10';\nconst DOCKER_CASSANDRA = 'cassandra:3.9';\nconst DOCKER_MSSQL = 'microsoft/mssql-server-linux:latest';\nconst DOCKER_ORACLE = 'sath89/oracle-12c:latest';\nconst DOCKER_ELASTICSEARCH = 'elasticsearch:2.4.1';\nconst DOCKER_KAFKA = 'wurstmeister/kafka:0.10.1.1';\nconst DOCKER_ZOOKEEPER = 'wurstmeister/zookeeper:3.4.6';\nconst DOCKER_SONAR = 'sonarqube:6.2-alpine';\nconst DOCKER_JHIPSTER_CONSOLE = 'jhipster/jhipster-console:v2.0.1';\nconst DOCKER_JHIPSTER_ELASTICSEARCH = 'jhipster/jhipster-elasticsearch:v2.0.1';\nconst DOCKER_JHIPSTER_LOGSTASH = 'jhipster/jhipster-logstash:v2.0.1';\nconst DOCKER_JHIPSTER_ZIPKIN = 'jhipster/jhipster-zipkin:v2.0.1';\nconst DOCKER_CONSUL = 'consul:0.7.2';\nconst DOCKER_CONSUL_CONFIG_LOADER = 'jhipster/consul-config-loader:v0.2.1';\nconst DOCKER_PROMETHEUS = 'prom/prometheus:v1.4.1';\nconst DOCKER_PROMETHEUS_ALERTMANAGER = 'prom/alertmanager:v0.5.1';\nconst DOCKER_GRAFANA = 'grafana/grafana:4.0.2';\nconst DOCKER_JENKINS = 'jenkins:latest';\n\n// version of Node, Yarn, NPM\nconst NODE_VERSION = '6.10.0';\nconst YARN_VERSION = '0.21.3';\nconst NPM_VERSION = '4.3.0';\n\n// all constants used throughout all generators\n\nconst MAIN_DIR = 'src/main/';\nconst TEST_DIR = 'src/test/';\n\n// Note: this will be prepended with 'target/' for Maven, or with 'build/' for Gradle.\nconst CLIENT_DIST_DIR = 'www/';\n\nconst SUPPORTED_VALIDATION_RULES = ['required', 'max', 'min', 'maxlength', 'minlength', 'maxbytes', 'minbytes', 'pattern'];\n\n// documentation constants\nconst JHIPSTER_DOCUMENTATION_URL = 'https://jhipster.github.io';\nconst JHIPSTER_DOCUMENTATION_ARCHIVE_PATH = '/documentation-archive/';\n\nconst constants = {\n    QUESTIONS: 15, // maximum possible number of questions\n    CLIENT_QUESTIONS: 4,\n    SERVER_QUESTIONS: 15,\n    INTERPOLATE_REGEX: /<%:([\\s\\S]+?)%>/g, // so that tags in templates do not get mistreated as _ templates\n    DOCKER_DIR: `${MAIN_DIR}docker/`,\n\n    MAIN_DIR,\n    TEST_DIR,\n\n    CLIENT_MAIN_SRC_DIR: `${MAIN_DIR}webapp/`,\n    CLIENT_TEST_SRC_DIR: `${TEST_DIR}javascript/`,\n    CLIENT_WEBPACK_DIR: 'webpack/',\n    CLIENT_DIST_DIR,\n    ANGULAR_DIR: `${MAIN_DIR}webapp/app/`,\n\n    SERVER_MAIN_SRC_DIR: `${MAIN_DIR}java/`,\n    SERVER_MAIN_RES_DIR: `${MAIN_DIR}resources/`,\n    SERVER_TEST_SRC_DIR: `${TEST_DIR}java/`,\n    SERVER_TEST_RES_DIR: `${TEST_DIR}resources/`,\n\n    // entity related\n    SUPPORTED_VALIDATION_RULES,\n\n    JHIPSTER_DOCUMENTATION_URL,\n    JHIPSTER_DOCUMENTATION_ARCHIVE_PATH,\n\n    DOCKER_JHIPSTER_REGISTRY,\n    DOCKER_JAVA_JRE,\n    DOCKER_MYSQL,\n    DOCKER_MARIADB,\n    DOCKER_POSTGRESQL,\n    DOCKER_MONGODB,\n    DOCKER_CASSANDRA,\n    DOCKER_MSSQL,\n    DOCKER_ORACLE,\n    DOCKER_ELASTICSEARCH,\n    DOCKER_KAFKA,\n    DOCKER_ZOOKEEPER,\n    DOCKER_SONAR,\n    DOCKER_JHIPSTER_CONSOLE,\n    DOCKER_JHIPSTER_ELASTICSEARCH,\n    DOCKER_JHIPSTER_LOGSTASH,\n    DOCKER_JHIPSTER_ZIPKIN,\n    DOCKER_CONSUL,\n    DOCKER_CONSUL_CONFIG_LOADER,\n    DOCKER_PROMETHEUS,\n    DOCKER_PROMETHEUS_ALERTMANAGER,\n    DOCKER_GRAFANA,\n    NODE_VERSION,\n    YARN_VERSION,\n    NPM_VERSION,\n    DOCKER_JENKINS\n};\n\nmodule.exports = constants;\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/node_modules/generator-jhipster/generators/generator-base.js":"const path = require('path');\nconst _ = require('lodash');\nconst Generator = require('yeoman-generator');\nconst chalk = require('chalk');\nconst Insight = require('insight');\nconst fs = require('fs');\nconst shelljs = require('shelljs');\nconst semver = require('semver');\nconst exec = require('child_process').exec;\nconst os = require('os');\nconst https = require('https');\nconst pluralize = require('pluralize');\nconst packagejs = require('../package.json');\nconst jhipsterUtils = require('./util');\nconst constants = require('./generator-constants');\n\nconst JHIPSTER_CONFIG_DIR = '.jhipster';\nconst MODULES_HOOK_FILE = `${JHIPSTER_CONFIG_DIR}/modules/jhi-hooks.json`;\nconst GENERATOR_JHIPSTER = 'generator-jhipster';\n\nconst CLIENT_MAIN_SRC_DIR = constants.CLIENT_MAIN_SRC_DIR;\nconst CLIENT_WEBPACK_DIR = constants.CLIENT_WEBPACK_DIR;\nconst SERVER_MAIN_SRC_DIR = constants.SERVER_MAIN_SRC_DIR;\nconst SERVER_MAIN_RES_DIR = constants.SERVER_MAIN_RES_DIR;\n\nmodule.exports = class extends Generator {\n\n    constructor(args, opts) {\n        super(args, opts);\n        this.env.options.appPath = this.config.get('appPath') || CLIENT_MAIN_SRC_DIR;\n    }\n\n    /**\n     * Add a new menu element, at the root of the menu.\n     *\n     * @param {string} routerName - The name of the AngularJS router that is added to the menu.\n     * @param {string} glyphiconName - The name of the Glyphicon (from Bootstrap) that will be displayed.\n     * @param {boolean} enableTranslation - If translations are enabled or not\n     * @param {string} clientFramework - The name of the client framework\n     */\n    addElementToMenu(routerName, glyphiconName, enableTranslation, clientFramework) {\n        let navbarPath;\n        try {\n            if (clientFramework === 'angular1') {\n                navbarPath = `${CLIENT_MAIN_SRC_DIR}app/layouts/navbar/navbar.html`;\n                jhipsterUtils.rewriteFile({\n                    file: navbarPath,\n                    needle: 'jhipster-needle-add-element-to-menu',\n                    splicable: [`<li ui-sref-active=\"active\">\n                                <a ui-sref=\"${routerName}\" ng-click=\"vm.collapseNavbar()\">\n                                    <span class=\"glyphicon glyphicon-${glyphiconName}\"></span>&nbsp;\n                                    <span ${enableTranslation ? `data-translate=\"global.menu.${routerName}\"` : ''}>${_.startCase(routerName)}</span>\n                                </a>\n                            </li>`\n                    ]\n                }, this);\n            } else {\n                navbarPath = `${CLIENT_MAIN_SRC_DIR}app/layouts/navbar/navbar.component.html`;\n                jhipsterUtils.rewriteFile({\n                    file: navbarPath,\n                    needle: 'jhipster-needle-add-element-to-menu',\n                    splicable: [`<li routerLinkActive=\"active\">\n                                <a routerLink=\"${routerName}\" routerLinkActive=\"active\" ng-click=\"vm.collapseNavbar()\">\n                                    <span class=\"glyphicon glyphicon-${glyphiconName}\"></span>&nbsp;\n                                    <span ${enableTranslation ? `data-translate=\"global.menu.${routerName}\"` : ''}>${_.startCase(routerName)}</span>\n                                </a>\n                            </li>`\n                    ]\n                }, this);\n            }\n        } catch (e) {\n            this.log(`${chalk.yellow('\\nUnable to find ') + navbarPath + chalk.yellow(' or missing required jhipster-needle. Reference to ') + routerName} ${chalk.yellow('not added to menu.\\n')}`);\n        }\n    }\n\n    /**\n     * Add a new menu element to the admin menu.\n     *\n     * @param {string} routerName - The name of the AngularJS router that is added to the admin menu.\n     * @param {string} glyphiconName - The name of the Glyphicon (from Bootstrap) that will be displayed.\n     * @param {boolean} enableTranslation - If translations are enabled or not\n     * @param {string} clientFramework - The name of the client framework\n     */\n    addElementToAdminMenu(routerName, glyphiconName, enableTranslation, clientFramework) {\n        let navbarAdminPath;\n        try {\n            if (clientFramework === 'angular1') {\n                navbarAdminPath = `${CLIENT_MAIN_SRC_DIR}app/layouts/navbar/navbar.html`;\n            } else {\n                navbarAdminPath = `${CLIENT_MAIN_SRC_DIR}app/layouts/navbar/navbar.component.html`;\n            }\n            jhipsterUtils.rewriteFile({\n                file: navbarAdminPath,\n                needle: 'jhipster-needle-add-element-to-admin-menu',\n                splicable: [`<li ui-sref-active=\"active\" >\n                            <a ui-sref=\"${routerName}\" ng-click=\"vm.collapseNavbar()\">\n                                <span class=\"glyphicon glyphicon-${glyphiconName}\"></span>&nbsp;\n                                <span ${enableTranslation ? `data-translate=\"global.menu.admin.${routerName}\"` : ''}>${_.startCase(routerName)}</span>\n                            </a>\n                        </li>`\n                ]\n            }, this);\n        } catch (e) {\n            this.log(`${chalk.yellow('\\nUnable to find ') + navbarAdminPath + chalk.yellow(' or missing required jhipster-needle. Reference to ') + routerName} ${chalk.yellow('not added to admin menu.\\n')}`);\n        }\n    }\n\n    /**\n     * Add a new entity route path to webpacks config\n     *\n     * @param {string} microserviceName - The name of the microservice to put into the url\n     * @param {string} clientFramework - The name of the client framework\n     */\n    addEntityToWebpack(microserviceName, clientFramework) {\n        if (clientFramework === 'angular1') {\n            return;\n        }\n\n        const webpackDevPath = `${CLIENT_WEBPACK_DIR}/webpack.dev.js`;\n        jhipsterUtils.rewriteFile({\n            file: webpackDevPath,\n            needle: 'jhipster-needle-add-entity-to-webpack',\n            splicable: [`'/${microserviceName.toLowerCase()}',`]\n        }, this);\n    }\n\n    /**\n     * Add a new entity in the \"entities\" menu.\n     *\n     * @param {string} routerName - The name of the AngularJS router (which by default is the name of the entity).\n     * @param {boolean} enableTranslation - If translations are enabled or not\n     * @param {string} clientFramework - The name of the client framework\n     */\n    addEntityToMenu(routerName, enableTranslation, clientFramework) {\n        let entityMenuPath;\n        try {\n            if (clientFramework === 'angular1') {\n                entityMenuPath = `${CLIENT_MAIN_SRC_DIR}app/layouts/navbar/navbar.html`;\n                jhipsterUtils.rewriteFile({\n                    file: entityMenuPath,\n                    needle: 'jhipster-needle-add-entity-to-menu',\n                    splicable: [`<li ui-sref-active=\"active\">\n                                <a ui-sref=\"${routerName}\" ng-click=\"vm.collapseNavbar()\">\n                                    <span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp;\n                                    <span ${enableTranslation ? `data-translate=\"global.menu.entities.${_.camelCase(routerName)}\"` : ''}>${_.startCase(routerName)}</span>\n                                </a>\n                            </li>`\n                    ]\n                }, this);\n            } else {\n                entityMenuPath = `${CLIENT_MAIN_SRC_DIR}app/layouts/navbar/navbar.component.html`;\n                jhipsterUtils.rewriteFile({\n                    file: entityMenuPath,\n                    needle: 'jhipster-needle-add-entity-to-menu',\n                    splicable: [\n                        this.stripMargin(\n                            `|<li uiSrefActive=\"active\">\n                             |                        <a class=\"dropdown-item\" routerLink=\"${routerName}\" (click)=\"collapseNavbar()\">\n                             |                            <i class=\"fa fa-fw fa-asterisk\" aria-hidden=\"true\"></i>\n                             |                            <span ${enableTranslation ? `jhiTranslate=\"global.menu.entities.${_.camelCase(routerName)}\"` : ''}>${_.startCase(routerName)}</span>\n                             |                        </a>\n                             |                    </li>`\n                        )\n                    ]\n                }, this);\n            }\n        } catch (e) {\n            this.log(`${chalk.yellow('\\nUnable to find ') + entityMenuPath + chalk.yellow(' or missing required jhipster-needle. Reference to ') + routerName} ${chalk.yellow('not added to menu.\\n')}`);\n        }\n    }\n    /**\n     * Add a new entity in the TS modules file.\n     *\n     * @param {string} routerName - The name of the AngularJS router (which by default is the name of the entity).\n     * @param {boolean} enableTranslation - If translations are enabled or not\n     * @param {string} clientFramework - The name of the client framework\n     */\n    addEntityToModule(entityInstance, entityClass, entityAngularName, entityFolderName, entityFileName, enableTranslation, clientFramework) {\n        const entityModulePath = `${CLIENT_MAIN_SRC_DIR}app/entities/entity.module.ts`;\n        try {\n            if (clientFramework === 'angular1') {\n                return;\n            }\n            const appName = this.getAngular2AppName();\n\n            jhipsterUtils.rewriteFile({\n                file: entityModulePath,\n                needle: 'jhipster-needle-add-entity-module-import',\n                splicable: [\n                    this.stripMargin(\n                        `|import { ${appName}${entityAngularName}Module } from './${entityFolderName}/${entityFileName}.module';`\n                    )\n                ]\n            }, this);\n\n            jhipsterUtils.rewriteFile({\n                file: entityModulePath,\n                needle: 'jhipster-needle-add-entity-module',\n                splicable: [\n                    this.stripMargin(\n                        `|${appName}${entityAngularName}Module,`\n                    )\n                ]\n            }, this);\n        } catch (e) {\n            this.log(e);\n            this.log(`${chalk.yellow('\\nUnable to find ') + entityModulePath + chalk.yellow(' or missing required jhipster-needle. Reference to ') + entityInstance + entityClass + entityFolderName + entityFileName} ${chalk.yellow(`not added to ${entityModulePath}.\\n`)}`);\n        }\n    }\n\n    /**\n     * A a new element in the \"global.json\" translations.\n     *\n     * @param {string} key - Key for the menu entry\n     * @param {string} value - Default translated value\n     * @param {string} language - The language to which this translation should be added\n     */\n    addElementTranslationKey(key, value, language) {\n        const fullPath = `${CLIENT_MAIN_SRC_DIR}i18n/${language}/global.json`;\n        try {\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-menu-add-element',\n                splicable: [\n                    `\"${key}\": \"${_.startCase(value)}\",`\n                ]\n            }, this);\n        } catch (e) {\n            this.log(chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. Reference to ') + language + chalk.yellow(' not added as a new entity in the menu.\\n'));\n        }\n    }\n\n    /**\n     * A a new element in the admin section of \"global.json\" translations.\n     *\n     * @param {string} key - Key for the menu entry\n     * @param {string} value - Default translated value\n     * @param {string} language - The language to which this translation should be added\n     */\n    addAdminElementTranslationKey(key, value, language) {\n        const fullPath = `${CLIENT_MAIN_SRC_DIR}i18n/${language}/global.json`;\n        try {\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-menu-add-admin-element',\n                splicable: [\n                    `\"${key}\": \"${_.startCase(value)}\",`\n                ]\n            }, this);\n        } catch (e) {\n            this.log(chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. Reference to ') + language + chalk.yellow(' not added as a new entry in the admin menu.\\n'));\n        }\n    }\n\n    /**\n     * A a new entity in the \"global.json\" translations.\n     *\n     * @param {string} key - Key for the entity name\n     * @param {string} value - Default translated value\n     * @param {string} language - The language to which this translation should be added\n     */\n    addEntityTranslationKey(key, value, language) {\n        const fullPath = `${CLIENT_MAIN_SRC_DIR}i18n/${language}/global.json`;\n        try {\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-menu-add-entry',\n                splicable: [\n                    `\"${key}\": \"${_.startCase(value)}\",`\n                ]\n            }, this);\n        } catch (e) {\n            this.log(chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. Reference to ') + language + chalk.yellow(' not added as a new entity in the menu.\\n'));\n        }\n    }\n\n    /**\n     * A a new entry as a root param in \"global.json\" translations.\n     *\n     * @param {string} key - Key for the entry\n     * @param {string} value - Default translated value or object with multiple key and translated value\n     * @param {string} language - The language to which this translation should be added\n     */\n    addGlobalTranslationKey(key, value, language) {\n        const fullPath = `${CLIENT_MAIN_SRC_DIR}i18n/${language}/global.json`;\n        try {\n            jhipsterUtils.rewriteJSONFile(fullPath, (jsonObj) => {\n                jsonObj[key] = value;\n            }, this);\n        } catch (e) {\n            this.log(`${chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow('. Reference to ')}(key: ${key}, value:${value})${chalk.yellow(' not added to global translations.\\n')}`);\n        }\n    }\n\n    /**\n     * Add a translation key to all installed languages\n     *\n     * @param {string} key - Key for the entity name\n     * @param {string} value - Default translated value\n     * @param {string} method - The method to be run with provided key and value from above\n     * @param {string} enableTranslation - specify if i18n is enabled\n     */\n    addTranslationKeyToAllLanguages(key, value, method, enableTranslation) {\n        if (enableTranslation) {\n            this.getAllInstalledLanguages().forEach((language) => {\n                this[method](key, value, language);\n            });\n        }\n    }\n\n    /**\n     * get all the languages installed currently\n     */\n    getAllInstalledLanguages() {\n        const languages = [];\n        this.getAllSupportedLanguages().forEach((language) => {\n            try {\n                const stats = fs.lstatSync(`${CLIENT_MAIN_SRC_DIR}i18n/${language}`);\n                if (stats.isDirectory()) {\n                    languages.push(language);\n                }\n            } catch (e) {\n                // An exception is thrown if the folder doesn't exist\n                // do nothing as the language might not be installed\n            }\n        });\n        return languages;\n    }\n\n    /**\n     * get all the languages supported by JHipster\n     */\n    getAllSupportedLanguages() {\n        return _.map(this.getAllSupportedLanguageOptions(), 'value');\n    }\n\n    /**\n     * check if a language is supported by JHipster\n     * @param {string} language - Key for the language\n     */\n    isSupportedLanguage(language) {\n        return _.includes(this.getAllSupportedLanguages(), language);\n    }\n\n    /**\n     * get all the languages options supported by JHipster\n     */\n    getAllSupportedLanguageOptions() {\n        return [\n            { name: 'Armenian', value: 'hy' },\n            { name: 'Catalan', value: 'ca' },\n            { name: 'Chinese (Simplified)', value: 'zh-cn' },\n            { name: 'Chinese (Traditional)', value: 'zh-tw' },\n            { name: 'Czech', value: 'cs' },\n            { name: 'Danish', value: 'da' },\n            { name: 'Dutch', value: 'nl' },\n            { name: 'English', value: 'en' },\n            { name: 'Estonian', value: 'et' },\n            { name: 'French', value: 'fr' },\n            { name: 'Galician', value: 'gl' },\n            { name: 'German', value: 'de' },\n            { name: 'Greek', value: 'el' },\n            { name: 'Hindi', value: 'hi' },\n            { name: 'Hungarian', value: 'hu' },\n            { name: 'Italian', value: 'it' },\n            { name: 'Japanese', value: 'ja' },\n            { name: 'Korean', value: 'ko' },\n            { name: 'Marathi', value: 'mr' },\n            { name: 'Polish', value: 'pl' },\n            { name: 'Portuguese (Brazilian)', value: 'pt-br' },\n            { name: 'Portuguese', value: 'pt-pt' },\n            { name: 'Romanian', value: 'ro' },\n            { name: 'Russian', value: 'ru' },\n            { name: 'Slovak', value: 'sk' },\n            { name: 'Serbian', value: 'sr' },\n            { name: 'Spanish', value: 'es' },\n            { name: 'Swedish', value: 'sv' },\n            { name: 'Turkish', value: 'tr' },\n            { name: 'Tamil', value: 'ta' },\n            { name: 'Thai', value: 'th' },\n            { name: 'Vietnamese', value: 'vi' }\n        ];\n    }\n\n    /**\n     * Add new social configuration in the \"application.yml\".\n     *\n     * @param {string} name - social name (twitter, facebook, ect.)\n     * @param {string} clientId - clientId\n     * @param {string} clientSecret - clientSecret\n     * @param {string} comment - url of how to configure the social service\n     */\n    addSocialConfiguration(name, clientId, clientSecret, comment) {\n        const fullPath = `${SERVER_MAIN_RES_DIR}config/application.yml`;\n        try {\n            this.log(chalk.yellow('   update ') + fullPath);\n            let config = '';\n            if (comment) {\n                config += `# ${comment}\\n        `;\n            }\n            config += `${name}:\\n` +\n                `            clientId: ${clientId}\\n` +\n                `            clientSecret: ${clientSecret}\\n`;\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-add-social-configuration',\n                splicable: [\n                    config\n                ]\n            }, this);\n        } catch (e) {\n            this.log(`${chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow('. Reference to ')}social configuration ${name}${chalk.yellow(' not added.\\n')}`);\n        }\n    }\n\n    /**\n     * Add a new dependency in the \"bower.json\".\n     *\n     * @param {string} name - dependency name\n     * @param {string} version - dependency version\n     */\n    addBowerDependency(name, version) {\n        const fullPath = 'bower.json';\n        try {\n            jhipsterUtils.rewriteJSONFile(fullPath, (jsonObj) => {\n                jsonObj.dependencies[name] = version;\n            }, this);\n        } catch (e) {\n            this.log(e);\n            this.log(`${chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow('. Reference to ')}bower dependency (name: ${name}, version:${version})${chalk.yellow(' not added.\\n')}`);\n        }\n    }\n\n    /**\n     * Add a new override configuration in the \"bower.json\".\n     *\n     * @param {string} bowerPackageName - Bower package name use in dependencies\n     * @param {array} main - You can specify which files should be selected\n     * @param {boolean} isIgnored - Default: false, Set to true if you want to ignore this package.\n     * @param {object} dependencies - You can override the dependencies of a package. Set to null to ignore the dependencies.\n     *\n     */\n    addBowerOverride(bowerPackageName, main, isIgnored, dependencies) {\n        const fullPath = 'bower.json';\n        try {\n            jhipsterUtils.rewriteJSONFile(fullPath, (jsonObj) => {\n                const override = {};\n                if (main !== undefined && main.length > 0) {\n                    override.main = main;\n                }\n                if (isIgnored) {\n                    override.ignore = true;\n                }\n                if (dependencies) {\n                    override.dependencies = dependencies;\n                }\n                if (jsonObj.overrides === undefined) {\n                    jsonObj.overrides = {};\n                }\n                jsonObj.overrides[bowerPackageName] = override;\n            }, this);\n        } catch (e) {\n            this.log(`${chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow('. Reference to ')}bower override configuration (bowerPackageName: ${bowerPackageName}, main:${JSON.stringify(main)}, ignore:${isIgnored})${chalk.yellow(' not added.\\n')}`);\n        }\n    }\n\n    /**\n     * Add a new parameter in the \".bowerrc\".\n     *\n     * @param {string} key - name of the parameter\n     * @param {string, obj, bool, etc.} value - value of the parameter\n     */\n    addBowerrcParameter(key, value) {\n        const fullPath = '.bowerrc';\n        try {\n            this.log(chalk.yellow('   update ') + fullPath);\n            jhipsterUtils.rewriteJSONFile(fullPath, (jsonObj) => {\n                jsonObj[key] = value;\n            }, this);\n        } catch (e) {\n            this.log(`${chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow('. Reference to ')}bowerrc parameter (key: ${key}, value:${value})${chalk.yellow(' not added.\\n')}`);\n        }\n    }\n\n    /**\n     * Add a new dependency in the \"package.json\".\n     *\n     * @param {string} name - dependency name\n     * @param {string} version - dependency version\n     */\n    addNpmDependency(name, version) {\n        const fullPath = 'package.json';\n        try {\n            jhipsterUtils.rewriteJSONFile(fullPath, (jsonObj) => {\n                jsonObj.dependencies[name] = version;\n            }, this);\n        } catch (e) {\n            this.log(e);\n            this.log(`${chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow('. Reference to ')}npm dependency (name: ${name}, version:${version})${chalk.yellow(' not added.\\n')}`);\n        }\n    }\n\n    /**\n     * Add a new devDependency in the \"package.json\".\n     *\n     * @param {string} name - devDependency name\n     * @param {string} version - devDependency version\n     */\n    addNpmDevDependency(name, version) {\n        const fullPath = 'package.json';\n        try {\n            jhipsterUtils.rewriteJSONFile(fullPath, (jsonObj) => {\n                jsonObj.devDependencies[name] = version;\n            }, this);\n        } catch (e) {\n            this.log(e);\n            this.log(`${chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow('. Reference to ')}npm devDependency (name: ${name}, version:${version})${chalk.yellow(' not added.\\n')}`);\n        }\n    }\n\n    /**\n     * Add a new script in the \"package.json\".\n     *\n     * @param {string} name - script name\n     * @param {string} data - script version\n     */\n    addNpmScript(name, data) {\n        const fullPath = 'package.json';\n        try {\n            jhipsterUtils.rewriteJSONFile(fullPath, (jsonObj) => {\n                jsonObj.scripts[name] = data;\n            }, this);\n        } catch (e) {\n            this.log(e);\n            this.log(`${chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow('. Reference to ')}npm script (name: ${name}, data:${data})${chalk.yellow(' not added.\\n')}`);\n        }\n    }\n\n    /**\n     * Add a new module to the angular application in \"app.module.js\".\n     *\n     * @param {string} moduleName - module name\n     *\n     */\n    addAngularJsModule(moduleName) {\n        const fullPath = `${CLIENT_MAIN_SRC_DIR}app/app.module.js`;\n        try {\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-angularjs-add-module',\n                splicable: [\n                    `'${moduleName}',`\n                ]\n            }, this);\n        } catch (e) {\n            this.log(chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. Reference to ') + moduleName + chalk.yellow(' not added to JHipster app.\\n'));\n        }\n    }\n\n    /**\n     * Add a new http interceptor to the angular application in \"blocks/config/http.config.js\".\n     * The interceptor should be in its own .js file inside app/blocks/interceptor folder\n     * @param {string} interceptorName - angular name of the interceptor\n     *\n     */\n    addAngularJsInterceptor(interceptorName) {\n        const fullPath = `${CLIENT_MAIN_SRC_DIR}app/blocks/config/http.config.js`;\n        try {\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-angularjs-add-interceptor',\n                splicable: [\n                    `$httpProvider.interceptors.push('${interceptorName}');`\n                ]\n            }, this);\n        } catch (e) {\n            this.log(chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. Interceptor not added to JHipster app.\\n'));\n        }\n    }\n\n    /**\n     * Add a new entity to the Ehcache, for the 2nd level cache of an entity and its relationships.\n     *\n     * @param {string} entityClass - the entity to cache.\n     * @param {array} relationships - the relationships of this entity\n     * @param {string} packageName - the Java package name\n     * @param {string} packageFolder - the Java package folder\n     */\n    addEntityToEhcache(entityClass, relationships, packageName, packageFolder) {\n        // Add the entity to ehcache\n        this.addEntryToEhcache(`${packageName}.domain.${entityClass}.class.getName()`, packageFolder);\n        // Add the collections linked to that entity to ehcache\n        relationships.forEach((relationship) => {\n            const relationshipType = relationship.relationshipType;\n            if (relationshipType === 'one-to-many' || relationshipType === 'many-to-many') {\n                this.addEntryToEhcache(`${packageName}.domain.${entityClass}.class.getName() + \".${relationship.relationshipFieldNamePlural}\"`, packageFolder);\n            }\n        });\n    }\n\n    /**\n     * Add a new entry to Ehcache in CacheConfiguration.java\n     *\n     * @param {string} entry - the entry (including package name) to cache.\n     * @param {string} packageFolder - the Java package folder\n     */\n    addEntryToEhcache(entry, packageFolder) {\n        try {\n            const ehcachePath = `${SERVER_MAIN_SRC_DIR}${packageFolder}/config/CacheConfiguration.java`;\n            jhipsterUtils.rewriteFile({\n                file: ehcachePath,\n                needle: 'jhipster-needle-ehcache-add-entry',\n                splicable: [`cm.createCache(${entry}, jcacheConfiguration);`\n                ]\n            }, this);\n        } catch (e) {\n            this.log(chalk.yellow(`\\nUnable to add ${entry} to CacheConfiguration.java file.\\n\\t${e.message}`));\n        }\n    }\n\n    /**\n     * Add a new changelog to the Liquibase master.xml file.\n     *\n     * @param {string} changelogName - The name of the changelog (name of the file without .xml at the end).\n     */\n    addChangelogToLiquibase(changelogName) {\n        this.addLiquibaseChangelogToMaster(changelogName, 'jhipster-needle-liquibase-add-changelog');\n    }\n\n    /**\n     * Add a new constraints changelog to the Liquibase master.xml file.\n     *\n     * @param {string} changelogName - The name of the changelog (name of the file without .xml at the end).\n     */\n    addConstraintsChangelogToLiquibase(changelogName) {\n        this.addLiquibaseChangelogToMaster(changelogName, 'jhipster-needle-liquibase-add-constraints-changelog');\n    }\n\n    /**\n     * Add a new changelog to the Liquibase master.xml file.\n     *\n     * @param {string} changelogName - The name of the changelog (name of the file without .xml at the end).\n     * @param {string} needle - The needle at where it has to be added.\n     */\n    addLiquibaseChangelogToMaster(changelogName, needle) {\n        const fullPath = `${SERVER_MAIN_RES_DIR}config/liquibase/master.xml`;\n        try {\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle,\n                splicable: [\n                    `<include file=\"classpath:config/liquibase/changelog/${changelogName}.xml\" relativeToChangelogFile=\"false\"/>`\n                ]\n            }, this);\n        } catch (e) {\n            this.log(`${chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. Reference to ') + changelogName}.xml ${chalk.yellow('not added.\\n')}`);\n        }\n    }\n\n    /**\n     * A a new column to a Liquibase changelog file for entity.\n     *\n     * @param {string} filePath - The full path of the changelog file.\n     * @param {string} content - The content to be added as column, can have multiple columns as well\n     */\n    addColumnToLiquibaseEntityChangeset(filePath, content) {\n        try {\n            jhipsterUtils.rewriteFile({\n                file: filePath,\n                needle: 'jhipster-needle-liquibase-add-column',\n                splicable: [\n                    content\n                ]\n            }, this);\n        } catch (e) {\n            this.log(chalk.yellow('\\nUnable to find ') + filePath + chalk.yellow(' or missing required jhipster-needle. Column not added.\\n') + e);\n        }\n    }\n\n    /**\n     * Add a new social button in the login and register modules\n     *\n     * @param {string} socialName - name of the social module. ex: 'facebook'\n     * @param {string} socialParameter - parameter to send to social connection ex: 'public_profile,email'\n     * @param {string} buttonColor - color of the social button. ex: '#3b5998'\n     * @param {string} buttonHoverColor - color of the social button when is hover. ex: '#2d4373'\n     * @param {string} clientFramework - The name of the client framework\n     */\n    addSocialButton(isUseSass, socialName, socialParameter, buttonColor, buttonHoverColor, clientFramework) {\n        const socialServicefullPath = `${CLIENT_MAIN_SRC_DIR}app/account/social/social.service.js`;\n        let loginfullPath;\n        let registerfullPath;\n        if (clientFramework === 'angular1') {\n            loginfullPath = `${CLIENT_MAIN_SRC_DIR}app/account/login/login.html`;\n            registerfullPath = `${CLIENT_MAIN_SRC_DIR}app/account/register/register.html`;\n        } else {\n            loginfullPath = `${CLIENT_MAIN_SRC_DIR}app/account/login/login.component.html`;\n            registerfullPath = `${CLIENT_MAIN_SRC_DIR}app/account/register/register.component.html`;\n        }\n        try {\n            this.log(chalk.yellow('\\nupdate ') + socialServicefullPath);\n            const serviceCode = `case '${socialName}': return '${socialParameter}';`;\n            jhipsterUtils.rewriteFile({\n                file: socialServicefullPath,\n                needle: 'jhipster-needle-add-social-button',\n                splicable: [\n                    serviceCode\n                ]\n            }, this);\n\n            const buttonCode = `<jh-social ng-provider=\"${socialName}\"></jh-social>`;\n            this.log(chalk.yellow('update ') + loginfullPath);\n            jhipsterUtils.rewriteFile({\n                file: loginfullPath,\n                needle: 'jhipster-needle-add-social-button',\n                splicable: [\n                    buttonCode\n                ]\n            }, this);\n            this.log(chalk.yellow('update ') + registerfullPath);\n            jhipsterUtils.rewriteFile({\n                file: registerfullPath,\n                needle: 'jhipster-needle-add-social-button',\n                splicable: [\n                    buttonCode\n                ]\n            }, this);\n\n            const buttonStyle = `.jh-btn-${socialName} {\n                    background-color: ${buttonColor};\n                    border-color: rgba(0, 0, 0, 0.2);\n                    color: #fff;\n                }\\n\n                .jh-btn-${socialName}:hover, .jh-btn-${socialName}:focus, .jh-btn-${socialName}:active, .jh-btn-${socialName}.active, .open > .dropdown-toggle.jh-btn-${socialName} {\n                    background-color: ${buttonHoverColor};\n                    border-color: rgba(0, 0, 0, 0.2);\n                    color: #fff;\n                }`;\n            this.addMainCSSStyle(isUseSass, buttonStyle, `Add sign in style for ${socialName}`);\n        } catch (e) {\n            this.log(chalk.yellow(`\\nUnable to add social button modification.\\n${e}`));\n        }\n    }\n\n    /**\n     * Add a new social connection factory in the SocialConfiguration.java file.\n     *\n     * @param {string} javaDir - default java directory of the project (JHipster const)\n     * @param {string} importPackagePath - package path of the ConnectionFactory class\n     * @param {string} socialName - name of the social module\n     * @param {string} connectionFactoryClassName - name of the ConnectionFactory class\n     * @param {string} configurationName - name of the section in the config yaml file\n     */\n    addSocialConnectionFactory(javaDir, importPackagePath, socialName, connectionFactoryClassName, configurationName) {\n        const fullPath = `${javaDir}config/social/SocialConfiguration.java`;\n        try {\n            this.log(chalk.yellow('\\nupdate ') + fullPath);\n            const javaImport = `import ${importPackagePath};\\n`;\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-add-social-connection-factory-import-package',\n                splicable: [\n                    javaImport\n                ]\n            }, this);\n\n            const clientId = `${socialName}ClientId`;\n            const clientSecret = `${socialName}ClientSecret`;\n            const javaCode = `// ${socialName} configuration\\n` +\n                `        String ${clientId} = environment.getProperty(\"spring.social.${configurationName}.clientId\");\\n` +\n                `        String ${clientSecret} = environment.getProperty(\"spring.social.${configurationName}.clientSecret\");\\n` +\n                `        if (${clientId} != null && ${clientSecret} != null) {\\n` +\n                `            log.debug(\"Configuring ${connectionFactoryClassName}\");\\n` +\n                '            connectionFactoryConfigurer.addConnectionFactory(\\n' +\n                `                new ${connectionFactoryClassName}(\\n` +\n                `                    ${clientId},\\n` +\n                `                    ${clientSecret}\\n` +\n                '                )\\n' +\n                '            );\\n' +\n                '        } else {\\n' +\n                `            log.error(\"Cannot configure ${connectionFactoryClassName} id or secret null\");\\n` +\n                '        }\\n';\n\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-add-social-connection-factory',\n                splicable: [\n                    javaCode\n                ]\n            }, this);\n        } catch (e) {\n            this.log(`${chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. Social connection ') + e} ${chalk.yellow('not added.\\n')}`);\n        }\n    }\n\n    /**\n     * Add new css style to the angular application in \"main.css\".\n     *\n     * @param {string} style - css to add in the file\n     * @param {string} comment - comment to add before css code\n     *\n     * example:\n     *\n     * style = '.jhipster {\\n     color: #baa186;\\n}'\n     * comment = 'New JHipster color'\n     *\n     * * ==========================================================================\n     * New JHipster color\n     * ========================================================================== *\n     * .jhipster {\n     *     color: #baa186;\n     * }\n     *\n     */\n    addMainCSSStyle(isUseSass, style, comment) {\n        if (isUseSass) {\n            this.addMainSCSSStyle(style, comment);\n        }\n\n        const fullPath = `${CLIENT_MAIN_SRC_DIR}content/css/main.css`;\n        let styleBlock = '';\n        if (comment) {\n            styleBlock += '/* ==========================================================================\\n';\n            styleBlock += `${comment}\\n`;\n            styleBlock += '========================================================================== */\\n';\n        }\n        styleBlock += `${style}\\n`;\n        try {\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-css-add-main',\n                splicable: [\n                    styleBlock\n                ]\n            }, this);\n        } catch (e) {\n            this.log(chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. Style not added to JHipster app.\\n'));\n        }\n    }\n\n    /**\n     * Add new scss style to the angular application in \"main.scss\".\n     *\n     * @param {string} style - scss to add in the file\n     * @param {string} comment - comment to add before css code\n     *\n     * example:\n     *\n     * style = '.success {\\n     @extend .message;\\n    border-color: green;\\n}'\n     * comment = 'Message'\n     *\n     * * ==========================================================================\n     * Message\n     * ========================================================================== *\n     * .success {\n     *     @extend .message;\n     *     border-color: green;\n     * }\n     *\n     */\n    addMainSCSSStyle(style, comment) {\n        const fullPath = `${CLIENT_MAIN_SRC_DIR}scss/main.scss`;\n        let styleBlock = '';\n        if (comment) {\n            styleBlock += '/* ==========================================================================\\n';\n            styleBlock += `${comment}\\n`;\n            styleBlock += '========================================================================== */\\n';\n        }\n        styleBlock += `${style}\\n`;\n        try {\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-scss-add-main',\n                splicable: [\n                    styleBlock\n                ]\n            }, this);\n        } catch (e) {\n            this.log(chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. Style not added to JHipster app.\\n'));\n        }\n    }\n\n    /**\n     * Add a new Maven dependency.\n     *\n     * @param {string} groupId - dependency groupId\n     * @param {string} artifactId - dependency artifactId\n     * @param {string} version - explicit dependency version number\n     * @param {string} other - explicit other thing: scope, exclusions...\n     */\n    addMavenDependency(groupId, artifactId, version, other) {\n        const fullPath = 'pom.xml';\n        try {\n            let dependency = `${'<dependency>\\n' +\n                '            <groupId>'}${groupId}</groupId>\\n` +\n                `            <artifactId>${artifactId}</artifactId>\\n`;\n            if (version) {\n                dependency += `            <version>${version}</version>\\n`;\n            }\n            if (other) {\n                dependency += `${other}\\n`;\n            }\n            dependency += '        </dependency>';\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-maven-add-dependency',\n                splicable: [\n                    dependency\n                ]\n            }, this);\n        } catch (e) {\n            this.log(`${chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. Reference to ')}maven dependency (groupId: ${groupId}, artifactId:${artifactId}, version:${version})${chalk.yellow(' not added.\\n')}`);\n        }\n    }\n\n    /**\n     * Add a new Maven plugin.\n     *\n     * @param {string} groupId - plugin groupId\n     * @param {string} artifactId - plugin artifactId\n     * @param {string} version - explicit plugin version number\n     * @param {string} other - explicit other thing: executions, configuration...\n     */\n    addMavenPlugin(groupId, artifactId, version, other) {\n        const fullPath = 'pom.xml';\n        try {\n            let plugin = `${'<plugin>\\n' +\n                '                <groupId>'}${groupId}</groupId>\\n` +\n                `                <artifactId>${artifactId}</artifactId>\\n`;\n            if (version) {\n                plugin += `                <version>${version}</version>\\n`;\n            }\n            if (other) {\n                plugin += `${other}\\n`;\n            }\n            plugin += '            </plugin>';\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-maven-add-plugin',\n                splicable: [\n                    plugin\n                ]\n            }, this);\n        } catch (e) {\n            this.log(`${chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. Reference to ')}maven plugin (groupId: ${groupId}, artifactId:${artifactId}, version:${version})${chalk.yellow(' not added.\\n')}`);\n        }\n    }\n\n    /**\n     * A new Gradle plugin.\n     *\n     * @param {string} group - plugin GroupId\n     * @param {string} name - plugin name\n     * @param {string} version - explicit plugin version number\n     */\n    addGradlePlugin(group, name, version) {\n        const fullPath = 'build.gradle';\n        try {\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-gradle-buildscript-dependency',\n                splicable: [\n                    `classpath '${group}:${name}:${version}'`\n                ]\n            }, this);\n        } catch (e) {\n            this.log(`${chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. Reference to ')}classpath: ${group}:${name}:${version}${chalk.yellow(' not added.\\n')}`);\n        }\n    }\n\n    /**\n     * A new dependency to build.gradle file.\n     *\n     * @param {string} scope - scope of the new dependency, e.g. compile\n     * @param {string} group - maven GroupId\n     * @param {string} name - maven ArtifactId\n     * @param {string} version - explicit version number\n     */\n    addGradleDependency(scope, group, name, version) {\n        const fullPath = 'build.gradle';\n        try {\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-gradle-dependency',\n                splicable: [\n                    `${scope} '${group}:${name}:${version}'`\n                ]\n            }, this);\n        } catch (e) {\n            this.log(`${chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. Reference to ') + group}:${name}:${version}${chalk.yellow(' not added.\\n')}`);\n        }\n    }\n\n    /**\n     * Apply from an external Gradle build script.\n     *\n     * @param {string} name - name of the file to apply from, must be 'fileName.gradle'\n     */\n    applyFromGradleScript(name) {\n        const fullPath = 'build.gradle';\n        try {\n            jhipsterUtils.rewriteFile({\n                file: fullPath,\n                needle: 'jhipster-needle-gradle-apply-from',\n                splicable: [\n                    `apply from: '${name}.gradle'`\n                ]\n            }, this);\n        } catch (e) {\n            this.log(chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. Reference to ') + name + chalk.yellow(' not added.\\n'));\n        }\n    }\n\n    /**\n     * Generate a date to be used by Liquibase changelogs.\n     */\n    dateFormatForLiquibase() {\n        const now = new Date();\n        const nowUTC = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds());\n        const year = `${nowUTC.getFullYear()}`;\n        let month = `${nowUTC.getMonth() + 1}`;\n        if (month.length === 1) {\n            month = `0${month}`;\n        }\n        let day = `${nowUTC.getDate()}`;\n        if (day.length === 1) {\n            day = `0${day}`;\n        }\n        let hour = `${nowUTC.getHours()}`;\n        if (hour.length === 1) {\n            hour = `0${hour}`;\n        }\n        let minute = `${nowUTC.getMinutes()}`;\n        if (minute.length === 1) {\n            minute = `0${minute}`;\n        }\n        let second = `${nowUTC.getSeconds()}`;\n        if (second.length === 1) {\n            second = `0${second}`;\n        }\n        return `${year}${month}${day}${hour}${minute}${second}`;\n    }\n\n    /**\n     * Copy templates with all the custom logic applied according to the type.\n     *\n     * @param {string} source - path of the source file to copy from\n     * @param {string} dest - path of the destination file to copy to\n     * @param {string} action - type of the action to be performed on the template file, i.e: stripHtml | stripJs | template | copy\n     * @param {object} generator - context that can be used as the generator instance or data to process template\n     * @param {object} opt - options that can be passed to template method\n     * @param {boolean} template - flag to use template method instead of copy method\n     */\n    copyTemplate(source, dest, action, generator, opt = {}, template) {\n        const _this = generator || this;\n        let regex;\n        switch (action) {\n        case 'stripHtml' :\n            regex = new RegExp([\n                /( (data-t|jhiT)ranslate=\"([a-zA-Z0-9 +{}'](\\.)?)+\")/,                    // data-translate or jhiTranslate\n                /( translate(-v|V)alues=\"\\{([a-zA-Z]|\\d|:|\\{|\\}|\\[|\\]|-|'|\\s|\\.)*?\\}\")/,    // translate-values or translateValues\n                /( translate-compile)/,                                                         // translate-compile\n                /( translate-value-max=\"[0-9{}()|]*\")/,                                   // translate-value-max\n            ].map(r => r.source).join('|'), 'g');\n\n            jhipsterUtils.copyWebResource(source, dest, regex, 'html', _this, opt, template);\n            break;\n        case 'stripJs' :\n            regex = new RegExp([\n                /(,[\\s]*(resolve):[\\s]*[{][\\s]*(translatePartialLoader)['a-zA-Z0-9$,(){.<%=\\->;\\s:[\\]]*(;[\\s]*\\}\\][\\s]*\\}))/, // ng1 resolve block\n                /([\\s]import\\s\\{\\s?JhiLanguageService\\s?\\}\\sfrom\\s[\"|']ng-jhipster[\"|'];)/,       // ng2 import jhiLanguageService\n                /(,?\\s?JhiLanguageService,?\\s?)/,                                                          // ng2 import jhiLanguageService\n                /(private\\s[a-zA-Z0-9]*(L|l)anguageService\\s?:\\s?JhiLanguageService\\s?,*[\\s]*)/,          // ng2 jhiLanguageService constructor argument\n                /(this\\.[a-zA-Z0-9]*(L|l)anguageService\\.setLocations\\(\\[['\"a-zA-Z0-9\\-_,\\s]+\\]\\);[\\s]*)/, // jhiLanguageService invocations\n            ].map(r => r.source).join('|'), 'g');\n\n            jhipsterUtils.copyWebResource(source, dest, regex, 'js', _this, opt, template);\n            break;\n        case 'copy' :\n            _this.copy(source, dest);\n            break;\n        default:\n            _this.template(source, dest, _this, opt);\n        }\n    }\n\n    /**\n     * Copy html templates after stripping translation keys when translation is disabled.\n     *\n     * @param {string} source - path of the source file to copy from\n     * @param {string} dest - path of the destination file to copy to\n     * @param {object} generator - context that can be used as the generator instance or data to process template\n     * @param {object} opt - options that can be passed to template method\n     * @param {boolean} template - flag to use template method instead of copy\n     */\n    processHtml(source, dest, generator, opt, template) {\n        this.copyTemplate(source, dest, 'stripHtml', generator, opt, template);\n    }\n\n    /**\n     * Copy Js templates after stripping translation keys when translation is disabled.\n     *\n     * @param {string} source - path of the source file to copy from\n     * @param {string} dest - path of the destination file to copy to\n     * @param {object} generator - context that can be used as the generator instance or data to process template\n     * @param {object} opt - options that can be passed to template method\n     * @param {boolean} template - flag to use template method instead of copy\n     */\n    processJs(source, dest, generator, opt, template) {\n        this.copyTemplate(source, dest, 'stripJs', generator, opt, template);\n    }\n\n    /**\n     * Rewrite the specified file with provided content at the needle location\n     *\n     * @param {string} fullPath - path of the source file to rewrite\n     * @param {string} needle - needle to look for where content will be inserted\n     * @param {string} content - content to be written\n     */\n    rewriteFile(filePath, needle, content) {\n        try {\n            jhipsterUtils.rewriteFile({\n                file: filePath,\n                needle,\n                splicable: [\n                    content\n                ]\n            }, this);\n        } catch (e) {\n            this.log(chalk.yellow('\\nUnable to find ') + filePath + chalk.yellow(' or missing required needle. File rewrite failed.\\n'));\n        }\n    }\n\n    /**\n     * Replace the pattern/regex with provided content\n     *\n     * @param {string} fullPath - path of the source file to rewrite\n     * @param {string} pattern - pattern to look for where content will be replaced\n     * @param {string} content - content to be written\n     * @param {string} regex - true if pattern is regex\n     */\n    replaceContent(filePath, pattern, content, regex) {\n        try {\n            jhipsterUtils.replaceContent({\n                file: filePath,\n                pattern,\n                content,\n                regex\n            }, this);\n        } catch (e) {\n            this.log(chalk.yellow('\\nUnable to find ') + filePath + chalk.yellow(' or missing required pattern. File rewrite failed.\\n') + e);\n        }\n    }\n\n    /**\n     * Register a module configuration to .jhipster/modules/jhi-hooks.json\n     *\n     * @param {string} npmPackageName - npm package name of the generator\n     * @param {string} hookFor - from which JHipster generator this should be hooked ( 'entity' or 'app')\n     * @param {string} hookType - where to hook this at the generator stage ( 'pre' or 'post')\n     * @param {string} callbackSubGenerator[optional] - sub generator to invoke, if this is not given the module's main generator will be called, i.e app\n     * @param {string} description[optional] - description of the generator\n     */\n    registerModule(npmPackageName, hookFor, hookType, callbackSubGenerator, description) {\n        try {\n            let modules;\n            let error;\n            let duplicate;\n            const moduleName = _.startCase(npmPackageName.replace(`${GENERATOR_JHIPSTER}-`, ''));\n            const generatorName = npmPackageName.replace('generator-', '');\n            const generatorCallback = `${generatorName}:${callbackSubGenerator || 'app'}`;\n            const moduleConfig = {\n                name: `${moduleName} generator`,\n                npmPackageName,\n                description: description || `A JHipster module to generate ${moduleName}`,\n                hookFor,\n                hookType,\n                generatorCallback\n            };\n            try {\n                // if file is not present, we got an empty list, no exception\n                modules = this.fs.readJSON(MODULES_HOOK_FILE, []);\n                duplicate = _.findIndex(modules, moduleConfig) !== -1;\n            } catch (err) {\n                error = true;\n                this.log(chalk.red('The JHipster module configuration file could not be read!'));\n            }\n            if (!error && !duplicate) {\n                modules.push(moduleConfig);\n                this.fs.writeJSON(MODULES_HOOK_FILE, modules, null, 4);\n            }\n        } catch (err) {\n            this.log(`\\n${chalk.bold.red('Could not add jhipster module configuration')}`);\n        }\n    }\n\n    /**\n     * Add configuration to Entity.json files\n     *\n     * @param {string} file - configuration file name for the entity\n     * @param {string} key - key to be added or updated\n     * @param {object} value - value to be added\n     */\n    updateEntityConfig(file, key, value) {\n        try {\n            const entityJson = this.fs.readJSON(file);\n            entityJson[key] = value;\n            this.fs.writeJSON(file, entityJson, null, 4);\n        } catch (err) {\n            this.log(chalk.red('The JHipster entity configuration file could not be read!') + err);\n        }\n    }\n\n    /**\n     * get the module hooks config json\n     */\n    getModuleHooks() {\n        let modulesConfig = [];\n        try {\n            if (shelljs.test('-f', MODULES_HOOK_FILE)) {\n                modulesConfig = this.fs.readJSON(MODULES_HOOK_FILE);\n            }\n        } catch (err) {\n            this.log(chalk.red('The module configuration file could not be read!'));\n        }\n\n        return modulesConfig;\n    }\n\n    /**\n     * Call all the module hooks with the given options.\n     * @param {string} hookFor : \"app\" or \"entity\"\n     * @param {string} hookType : \"pre\" or \"post\"\n     * @param options : the options to pass to the hooks\n     */\n    callHooks(hookFor, hookType, options) {\n        const modules = this.getModuleHooks();\n        // run through all module hooks, which matches the hookFor and hookType\n        modules.forEach((module) => {\n            if (module.hookFor === hookFor && module.hookType === hookType) {\n                // compose with the modules callback generator\n                try {\n                    this.composeWith(module.generatorCallback, options);\n                } catch (err) {\n                    this.log(chalk.red('Could not compose module ') + chalk.bold.yellow(module.npmPackageName) +\n                        chalk.red('. \\nMake sure you have installed the module with ') + chalk.bold.yellow(`'npm -g ${module.npmPackageName}'`));\n                }\n            }\n        });\n    }\n\n    /**\n     * get an entity from the configuration file\n     * @param {string} file - configuration file name for the entity\n     */\n    getEntityJson(file) {\n        let entityJson = null;\n\n        try {\n            entityJson = this.fs.readJSON(path.join(JHIPSTER_CONFIG_DIR, `${_.upperFirst(file)}.json`));\n        } catch (err) {\n            this.log(chalk.red(`The JHipster entity configuration file could not be read for file ${file}!`) + err);\n        }\n\n        return entityJson;\n    }\n\n    /**\n     * get sorted list of entities according to changelog date (i.e. the order in which they were added)\n     */\n    getExistingEntities() {\n        const entities = [];\n\n        function isBefore(e1, e2) {\n            return e1.definition.changelogDate - e2.definition.changelogDate;\n        }\n\n        if (shelljs.test('-d', JHIPSTER_CONFIG_DIR)) {\n            shelljs.ls(path.join(JHIPSTER_CONFIG_DIR, '*.json')).forEach((file) => {\n                const definition = this.fs.readJSON(file);\n                entities.push({ name: path.basename(file, '.json'), definition });\n            });\n        }\n\n        return entities.sort(isBefore);\n    }\n\n    /**\n     * Copy i18 files for given language\n     *\n     * @param {object} generator - context that can be used as the generator instance or data to process template\n     * @param {string} webappDir - webapp directory path\n     * @param {string} fileToCopy - file name to copy\n     * @param {string} lang - language for which file needs to be copied\n     */\n    copyI18nFilesByName(generator, webappDir, fileToCopy, lang) {\n        const _this = generator || this;\n        _this.copy(`${webappDir}i18n/${lang}/${fileToCopy}`, `${webappDir}i18n/${lang}/${fileToCopy}`);\n    }\n\n    /**\n     * Check if the JHipster version used to generate an existing project is less than the passed version argument\n     *\n     * @param {string} version - A valid semver version string\n     */\n    isJhipsterVersionLessThan(version) {\n        const jhipsterVersion = this.config.get('jhipsterVersion');\n        if (!jhipsterVersion) {\n            return true;\n        }\n        return semver.lt(jhipsterVersion, version);\n    }\n\n    /**\n     * executes a git command using shellJS\n     * gitExec(args [, options ], callback)\n     *\n     * @param {string|array} args - can be an array of arguments or a string command\n     * @param {object} options[optional] - takes any of child process options\n     * @param {function} callback - a callback function to be called once process complete, The call back will receive code, stdout and stderr\n     */\n    gitExec(args, options, callback) {\n        callback = arguments[arguments.length - 1]; // eslint-disable-line prefer-rest-params\n        if (arguments.length < 3) {\n            options = {};\n        }\n        options.async = true;\n        options.silent = true;\n\n        if (!Array.isArray(args)) {\n            args = [args];\n        }\n        const command = `git ${args.join(' ')}`;\n        shelljs.exec(command, options, callback);\n    }\n\n    /**\n     * get a table name in JHipster preferred style.\n     *\n     * @param {string} value - table name string\n     */\n    getTableName(value) {\n        return this.hibernateSnakeCase(value);\n    }\n\n    /**\n     * get a table column name in JHipster preferred style.\n     *\n     * @param {string} value - table column name string\n     */\n    getColumnName(value) {\n        return this.hibernateSnakeCase(value);\n    }\n\n    /**\n     * get a table column names plural form in JHipster preferred style.\n     *\n     * @param {string} value - table column name string\n     */\n    getPluralColumnName(value) {\n        return this.getColumnName(pluralize(value));\n    }\n\n    /**\n     * get a table name for joined tables in JHipster preferred style.\n     *\n     * @param {string} entityName - name of the entity\n     * @param {string} relationshipName - name of the related entity\n     * @param {string} prodDatabaseType - database type\n     */\n    getJoinTableName(entityName, relationshipName, prodDatabaseType) {\n        const joinTableName = `${this.getTableName(entityName)}_${this.getTableName(relationshipName)}`;\n        let limit = 0;\n        if (prodDatabaseType === 'oracle' && joinTableName.length > 30) {\n            this.warning(`The generated join table \"${joinTableName}\" is too long for Oracle (which has a 30 characters limit). It will be truncated!`);\n\n            limit = 30;\n        } else if (prodDatabaseType === 'mysql' && joinTableName.length > 64) {\n            this.warning(`The generated join table \"${joinTableName}\" is too long for MySQL (which has a 64 characters limit). It will be truncated!`);\n\n            limit = 64;\n        }\n        if (limit > 0) {\n            const halfLimit = Math.floor(limit / 2);\n            const entityTable = _.snakeCase(this.getTableName(entityName).substring(0, halfLimit));\n            const relationTable = _.snakeCase(this.getTableName(relationshipName).substring(0, halfLimit - 1));\n            return `${entityTable}_${relationTable}`;\n        }\n        return joinTableName;\n    }\n\n    /**\n     * get a constraint name for tables in JHipster preferred style.\n     *\n     * @param {string} entityName - name of the entity\n     * @param {string} relationshipName - name of the related entity\n     * @param {string} prodDatabaseType - database type\n     * @param {boolean} noSnakeCase - do not convert names to snakecase\n     */\n    getConstraintName(entityName, relationshipName, prodDatabaseType, noSnakeCase) {\n        let constraintName;\n        if (noSnakeCase) {\n            constraintName = `fk_${entityName}_${relationshipName}_id`;\n        } else {\n            constraintName = `fk_${this.getTableName(entityName)}_${this.getTableName(relationshipName)}_id`;\n        }\n        let limit = 0;\n\n        if (prodDatabaseType === 'oracle' && constraintName.length > 30) {\n            this.warning(`The generated constraint name \"${constraintName}\" is too long for Oracle (which has a 30 characters limit). It will be truncated!`);\n\n            limit = 28;\n        } else if (prodDatabaseType === 'mysql' && constraintName.length > 64) {\n            this.warning(`The generated constraint name \"${constraintName}\" is too long for MySQL (which has a 64 characters limit). It will be truncated!`);\n\n            limit = 62;\n        }\n        if (limit > 0) {\n            const halfLimit = Math.floor(limit / 2);\n            const entityTable = noSnakeCase ? entityName.substring(0, halfLimit) : _.snakeCase(this.getTableName(entityName).substring(0, halfLimit));\n            const relationTable = noSnakeCase ? relationshipName.substring(0, halfLimit - 1) : _.snakeCase(this.getTableName(relationshipName).substring(0, halfLimit - 1));\n            return `${entityTable}_${relationTable}_id`;\n        }\n        return constraintName;\n    }\n\n    /**\n     * Print an error message.\n     *\n     * @param {string} msg - message to print\n     */\n    error(msg) {\n        this.env.error(`${chalk.red.bold('ERROR!')} ${msg}`);\n    }\n\n    /**\n     * Print a warning message.\n     *\n     * @param {string} value - message to print\n     */\n    warning(msg) {\n        this.log(`${chalk.yellow.bold('WARNING!')} ${msg}`);\n    }\n\n    /**\n     * Generate a KeyStore for uaa authorization server.\n     */\n    generateKeyStore() {\n        const keyStoreFile = `${SERVER_MAIN_RES_DIR}keystore.jks`;\n        if (this.fs.exists(keyStoreFile)) {\n            this.log(chalk.cyan(`\\nKeyStore '${keyStoreFile}' already exists. Leaving unchanged.\\n`));\n        } else {\n            shelljs.mkdir('-p', SERVER_MAIN_RES_DIR);\n            const javaHome = shelljs.env.JAVA_HOME;\n            let keytoolPath = '';\n            if (javaHome) {\n                keytoolPath = `${javaHome}/bin/`;\n            }\n            shelljs.exec(`\"${keytoolPath}keytool\" -genkey -noprompt ` +\n                '-keyalg RSA ' +\n                '-alias selfsigned ' +\n                `-keystore ${keyStoreFile} ` +\n                '-storepass password ' +\n                '-keypass password ' +\n                '-keysize 2048 ' +\n                `-dname \"CN=Java Hipster, OU=Development, O=${this.packageName}, L=, ST=, C=\"`\n            , (code) => {\n                if (code !== 0) {\n                    this.error('\\nFailed to create a KeyStore with \\'keytool\\'', code);\n                } else {\n                    this.log(chalk.green(`\\nKeyStore '${keyStoreFile}' generated successfully.\\n`));\n                }\n            });\n        }\n    }\n\n    /**\n     * Prints a JHipster logo.\n     */\n    printJHipsterLogo() {\n        this.log(`${chalk.green('\\n        ██╗')}${chalk.red(' ██╗   ██╗ ████████╗ ███████╗   ██████╗ ████████╗ ████████╗ ███████╗')}`);\n        this.log(`${chalk.green('        ██║')}${chalk.red(' ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔════╝ ╚══██╔══╝ ██╔═════╝ ██╔═══██╗')}`);\n        this.log(`${chalk.green('        ██║')}${chalk.red(' ████████║    ██║    ███████╔╝ ╚█████╗     ██║    ██████╗   ███████╔╝')}`);\n        this.log(`${chalk.green('  ██╗   ██║')}${chalk.red(' ██╔═══██║    ██║    ██╔════╝   ╚═══██╗    ██║    ██╔═══╝   ██╔══██║')}`);\n        this.log(`${chalk.green('  ╚██████╔╝')}${chalk.red(' ██║   ██║ ████████╗ ██║       ██████╔╝    ██║    ████████╗ ██║  ╚██╗')}`);\n        this.log(`${chalk.green('   ╚═════╝ ')}${chalk.red(' ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝')}\\n`);\n        this.log(chalk.white.bold('                            https://jhipster.github.io\\n'));\n        this.log(chalk.white('Welcome to the JHipster Generator ') + chalk.yellow(`v${packagejs.version}`));\n        this.log(chalk.white(`Documentation for creating an application: ${chalk.yellow('https://jhipster.github.io/creating-an-app/')}`));\n        this.log(chalk.white(`Application files will be generated in folder: ${chalk.yellow(process.cwd())}`));\n    }\n\n    /**\n     * Checks if there is a newer JHipster version available.\n     */\n    checkForNewVersion() {\n        try {\n            const done = this.async();\n            shelljs.exec(`npm show ${GENERATOR_JHIPSTER} version`, { silent: true }, (code, stdout, stderr) => {\n                if (!stderr && semver.lt(packagejs.version, stdout)) {\n                    this.log(\n                        `${chalk.yellow(' ______________________________________________________________________________\\n\\n') +\n                        chalk.yellow('  JHipster update available: ') + chalk.green.bold(stdout.replace('\\n', '')) + chalk.gray(` (current: ${packagejs.version})`)}\\n`\n                    );\n                    if (this.useYarn) {\n                        this.log(chalk.yellow(`  Run ${chalk.magenta(`yarn global upgrade ${GENERATOR_JHIPSTER}`)} to update.\\n`));\n                    } else {\n                        this.log(chalk.yellow(`  Run ${chalk.magenta(`npm install -g ${GENERATOR_JHIPSTER}`)} to update.\\n`));\n                    }\n                    this.log(chalk.yellow(' ______________________________________________________________________________\\n'));\n                }\n                done();\n            });\n        } catch (err) {\n            // fail silently as this function doesn't affect normal generator flow\n        }\n    }\n\n    /**\n     * get the Angular application name.\n     */\n    getAngularAppName() {\n        return _.camelCase(this.baseName, true) + (this.baseName.endsWith('App') ? '' : 'App');\n    }\n\n    /**\n     * get the Angular 2+ application name.\n     */\n    getAngular2AppName() {\n        return _.upperFirst(_.camelCase(this.baseName, true));\n    }\n\n    /**\n     * get the java main class name.\n     */\n    getMainClassName() {\n        const main = _.upperFirst(this.getAngularAppName());\n        const acceptableForJava = new RegExp('^[A-Z][a-zA-Z0-9_]*$');\n\n        return acceptableForJava.test(main) ? main : 'Application';\n    }\n\n    /**\n     * ask a prompt for apps name.\n     *\n     * @param {object} generator - generator instance to use\n     */\n    askModuleName(generator) {\n        const done = generator.async();\n        const defaultAppBaseName = this.getDefaultAppName();\n        generator.prompt({\n            type: 'input',\n            name: 'baseName',\n            validate: (input) => {\n                if (!(/^([a-zA-Z0-9_]*)$/.test(input))) {\n                    return 'Your application name cannot contain special characters or a blank space';\n                } else if (generator.applicationType === 'microservice' && /_/.test(input)) {\n                    return 'Your microservice name cannot contain underscores as this does not meet the URI spec';\n                } else if (input === 'application') {\n                    return 'Your application name cannot be named \\'application\\' as this is a reserved name for Spring Boot';\n                }\n                return true;\n            },\n            message: response => this.getNumberedQuestion('What is the base name of your application?', true),\n            default: defaultAppBaseName\n        }).then((prompt) => {\n            generator.baseName = prompt.baseName;\n            done();\n        });\n    }\n\n    /**\n     * ask a prompt for i18n option.\n     *\n     * @param {object} generator - generator instance to use\n     */\n    aski18n(generator) {\n        const languageOptions = this.getAllSupportedLanguageOptions();\n\n        const done = generator.async();\n        const prompts = [\n            {\n                type: 'confirm',\n                name: 'enableTranslation',\n                message: response => this.getNumberedQuestion('Would you like to enable internationalization support?', true),\n                default: true\n            },\n            {\n                when: response => response.enableTranslation === true,\n                type: 'list',\n                name: 'nativeLanguage',\n                message: 'Please choose the native language of the application?',\n                choices: languageOptions,\n                default: 'en',\n                store: true\n            },\n            {\n                when: response => response.enableTranslation === true,\n                type: 'checkbox',\n                name: 'languages',\n                message: 'Please choose additional languages to install',\n                choices: response => _.filter(languageOptions, o => o.value !== response.nativeLanguage)\n            }\n        ];\n\n        generator.prompt(prompts).then((prompt) => {\n            generator.enableTranslation = prompt.enableTranslation;\n            generator.nativeLanguage = prompt.nativeLanguage;\n            generator.languages = [prompt.nativeLanguage].concat(prompt.languages);\n            done();\n        });\n    }\n\n    /**\n     * compose using the language sub generator.\n     *\n     * @param {object} generator - generator instance to use\n     * @param {object} configOptions - options to pass to the generator\n     * @param {String} type - server | client\n     */\n    composeLanguagesSub(generator, configOptions, type) {\n        if (generator.enableTranslation) {\n            // skip server if app type is client\n            const skipServer = type && type === 'client';\n            // skip client if app type is server\n            const skipClient = type && type === 'server';\n            generator.composeWith(require.resolve('./languages'), {\n                'skip-install': true,\n                'skip-server': skipServer,\n                'skip-client': skipClient,\n                configOptions,\n                force: generator.options.force,\n                languages: generator.languages\n            });\n        }\n    }\n\n    /**\n     * Add numbering to a question\n     *\n     * @param {String} msg - question text\n     * @param {boolean} cond - increment question\n     */\n    getNumberedQuestion(msg, cond) {\n        if (cond) {\n            ++this.currentQuestion;\n        }\n        return `(${this.currentQuestion}/${this.totalQuestions}) ${msg}`;\n    }\n\n    /**\n     * build a generated application.\n     *\n     * @param {String} buildTool - maven | gradle\n     * @param {String} profile - dev | prod\n     * @param {Function} cb - callback when build is complete\n     */\n    buildApplication(buildTool, profile, cb) {\n        let buildCmd = 'mvnw package -DskipTests=true -B';\n\n        if (buildTool === 'gradle') {\n            buildCmd = 'gradlew bootRepackage -x test';\n        }\n\n        if (os.platform() !== 'win32') {\n            buildCmd = `./${buildCmd}`;\n        }\n        buildCmd += ` -P${profile}`;\n        const child = {};\n        child.stdout = exec(buildCmd, cb).stdout;\n        child.buildCmd = buildCmd;\n\n        return child;\n    }\n\n    /**\n     * write the given files using provided config.\n     *\n     * @param {object} files - files to write\n     * @param {object} generator - the generator instance to use\n     * @param {boolean} returnFiles - weather to return the generated file list or to write them\n     * @param {string} prefix - pefix to add to path\n     */\n    writeFilesToDisk(files, generator, returnFiles, prefix) {\n        const _this = generator || this;\n        const filesOut = [];\n        const startTime = new Date();\n        // using the fastest method for iterations\n        for (let i = 0, blocks = Object.keys(files); i < blocks.length; i++) {\n            for (let j = 0, blockTemplates = files[blocks[i]]; j < blockTemplates.length; j++) {\n                const blockTemplate = blockTemplates[j];\n                if (!blockTemplate.condition || blockTemplate.condition(_this)) {\n                    const path = blockTemplate.path ? blockTemplate.path : '';\n                    blockTemplate.templates.forEach((templateObj) => {\n                        let templatePath = path;\n                        let method = 'template';\n                        let useTemplate = false;\n                        let options = {};\n                        let templatePathTo;\n                        if (typeof templateObj === 'string') {\n                            templatePath += templateObj;\n                        } else {\n                            templatePath += templateObj.file;\n                            method = templateObj.method ? templateObj.method : method;\n                            useTemplate = templateObj.template ? templateObj.template : useTemplate;\n                            options = templateObj.options ? templateObj.options : options;\n                        }\n                        if (templateObj && templateObj.renameTo) {\n                            templatePathTo = path + templateObj.renameTo(_this);\n                        } else {\n                            templatePathTo = templatePath.replace(/([/])_|^_/, '$1');\n                        }\n                        filesOut.push(templatePathTo);\n                        if (!returnFiles) {\n                            const templatePathFrom = prefix ? `${prefix}/${templatePath}` : templatePath;\n                            // if (method === 'template')\n                            _this[method](templatePathFrom, templatePathTo, _this, options, useTemplate);\n                        }\n                    });\n                }\n            }\n        }\n        if (this.isDebugEnabled) {\n            this.debug(`Time taken to write files: ${new Date() - startTime}ms`);\n        }\n        return filesOut;\n    }\n\n    /*= =======================================================================*/\n    /* private methods use within generator (not exposed to modules)*/\n    /*= =======================================================================*/\n\n    installI18nClientFilesByLanguage(_this, webappDir, lang) {\n        const generator = _this || this;\n        generator.copyI18nFilesByName(generator, webappDir, 'audits.json', lang);\n        generator.copyI18nFilesByName(generator, webappDir, 'configuration.json', lang);\n        generator.copyI18nFilesByName(generator, webappDir, 'error.json', lang);\n        generator.copyI18nFilesByName(generator, webappDir, 'gateway.json', lang);\n        generator.copyI18nFilesByName(generator, webappDir, 'login.json', lang);\n        generator.copyI18nFilesByName(generator, webappDir, 'logs.json', lang);\n        generator.copyI18nFilesByName(generator, webappDir, 'home.json', lang);\n        generator.copyI18nFilesByName(generator, webappDir, 'metrics.json', lang);\n        generator.copyI18nFilesByName(generator, webappDir, 'password.json', lang);\n        generator.copyI18nFilesByName(generator, webappDir, 'register.json', lang);\n        generator.copyI18nFilesByName(generator, webappDir, 'sessions.json', lang);\n        generator.copyI18nFilesByName(generator, webappDir, 'settings.json', lang);\n        generator.copyI18nFilesByName(generator, webappDir, 'user-management.json', lang);\n\n        // tracker.json for Websocket\n        if (this.websocket === 'spring-websocket') {\n            generator.copyI18nFilesByName(generator, webappDir, 'tracker.json', lang);\n        }\n\n        if (this.enableSocialSignIn) {\n            generator.copyI18nFilesByName(generator, webappDir, 'social.json', lang);\n        }\n\n        // Templates\n        generator.template(`${webappDir}i18n/${lang}/_activate.json`, `${webappDir}i18n/${lang}/activate.json`);\n        generator.template(`${webappDir}i18n/${lang}/_global.json`, `${webappDir}i18n/${lang}/global.json`);\n        generator.template(`${webappDir}i18n/${lang}/_health.json`, `${webappDir}i18n/${lang}/health.json`);\n        generator.template(`${webappDir}i18n/${lang}/_reset.json`, `${webappDir}i18n/${lang}/reset.json`);\n    }\n\n    installI18nServerFilesByLanguage(_this, resourceDir, lang) {\n        const generator = _this || this;\n        // Template the message server side properties\n        const langProp = lang.replace(/-/g, '_');\n        generator.template(`${resourceDir}i18n/_messages_${langProp}.properties`, `${resourceDir}i18n/messages_${langProp}.properties`);\n    }\n\n    copyI18n(language, prefix) {\n        try {\n            this.template(`${prefix}/i18n/_entity_${language}.json`, `${CLIENT_MAIN_SRC_DIR}i18n/${language}/${this.entityInstance}.json`);\n            this.addEntityTranslationKey(this.entityTranslationKeyMenu, this.entityClass, language);\n        } catch (e) {\n            // An exception is thrown if the folder doesn't exist\n            // do nothing\n        }\n    }\n\n    copyEnumI18n(language, enumInfo, prefix) {\n        try {\n            this.template(`${prefix}/i18n/_enum.json`, `${CLIENT_MAIN_SRC_DIR}i18n/${language}/${enumInfo.enumInstance}.json`, this, {}, enumInfo);\n        } catch (e) {\n            // An exception is thrown if the folder doesn't exist\n            // do nothing\n        }\n    }\n\n    updateLanguagesInLanguageConstant(languages) {\n        const fullPath = `${CLIENT_MAIN_SRC_DIR}app/components/language/language.constants.js`;\n        try {\n            let content = '.constant(\\'LANGUAGES\\', [\\n';\n            for (let i = 0, len = languages.length; i < len; i++) {\n                const language = languages[i];\n                content += `            '${language}'${i !== languages.length - 1 ? ',' : ''}\\n`;\n            }\n            content +=\n                '            // jhipster-needle-i18n-language-constant - JHipster will add/remove languages in this array\\n' +\n                '        ]';\n\n            jhipsterUtils.replaceContent({\n                file: fullPath,\n                pattern: /\\.constant.*LANGUAGES.*\\[([^\\]]*jhipster-needle-i18n-language-constant[^\\]]*)\\]/g,\n                content\n            }, this);\n        } catch (e) {\n            this.log(chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. LANGUAGE constant not updated with languages: ') + languages + chalk.yellow(' since block was not found. Check if you have enabled translation support.\\n'));\n        }\n    }\n\n    updateLanguagesInLanguageConstantNG2(languages) {\n        const fullPath = `${CLIENT_MAIN_SRC_DIR}app/shared/language/language.constants.ts`;\n        try {\n            let content = 'export const LANGUAGES: string[] = [\\n';\n            for (let i = 0, len = languages.length; i < len; i++) {\n                const language = languages[i];\n                content += `    '${language}'${i !== languages.length - 1 ? ',' : ''}\\n`;\n            }\n            content +=\n                '    // jhipster-needle-i18n-language-constant - JHipster will add/remove languages in this array\\n' +\n                '];';\n\n            jhipsterUtils.replaceContent({\n                file: fullPath,\n                pattern: /export.*LANGUAGES.*\\[([^\\]]*jhipster-needle-i18n-language-constant[^\\]]*)\\];/g,\n                content\n            }, this);\n        } catch (e) {\n            this.log(chalk.yellow('\\nUnable to find ') + fullPath + chalk.yellow(' or missing required jhipster-needle. LANGUAGE constant not updated with languages: ') + languages + chalk.yellow(' since block was not found. Check if you have enabled translation support.\\n'));\n        }\n    }\n\n    insight(trackingCode = 'UA-46075199-2', packageName = packagejs.name, packageVersion = packagejs.version) {\n        const insight = new Insight({\n            trackingCode,\n            packageName,\n            packageVersion\n        });\n\n        insight.trackWithEvent = (category, action) => {\n            insight.track(category, action);\n            insight.trackEvent({\n                category,\n                action,\n                label: `${category} ${action}`,\n                value: 1\n            });\n        };\n\n        return insight;\n    }\n\n    removeFile(file) {\n        if (shelljs.test('-f', file)) {\n            this.log(`Removing the file - ${file}`);\n            shelljs.rm(file);\n        }\n    }\n\n    removeFolder(folder) {\n        if (shelljs.test('-d', folder)) {\n            this.log(`Removing the folder - ${folder}`);\n            shelljs.rm('-rf', folder);\n        }\n    }\n\n    getDefaultAppName() {\n        return (/^[a-zA-Z0-9_]+$/.test(path.basename(process.cwd()))) ? path.basename(process.cwd()) : 'jhipster';\n    }\n\n    formatAsClassJavadoc(text) {\n        return jhipsterUtils.getJavadoc(text, 0);\n    }\n\n    formatAsFieldJavadoc(text) {\n        return jhipsterUtils.getJavadoc(text, 4);\n    }\n\n    formatAsApiDescription(text) {\n        const rows = text.split('\\n');\n        let description = rows[0];\n        for (let i = 1; i < rows.length; i++) {\n            // discard empty rows\n            if (rows[i] !== '') {\n                // if simple text then put space between row strings\n                if (!description.endsWith('>') && !rows[i].startsWith('<')) {\n                    description += ' ';\n                }\n                description += rows[i];\n            }\n        }\n        return description;\n    }\n\n    isNumber(input) {\n        if (isNaN(this.filterNumber(input))) {\n            return false;\n        }\n        return true;\n    }\n\n    isSignedNumber(input) {\n        if (isNaN(this.filterNumber(input, true))) {\n            return false;\n        }\n        return true;\n    }\n\n    isSignedDecimalNumber(input) {\n        if (isNaN(this.filterNumber(input, true, true))) {\n            return false;\n        }\n        return true;\n    }\n\n    filterNumber(input, isSigned, isDecimal) {\n        const signed = isSigned ? '(\\\\-|\\\\+)?' : '';\n        const decimal = isDecimal ? '(\\\\.[0-9]+)?' : '';\n        const regex = new RegExp(`^${signed}([0-9]+${decimal})$`);\n\n        if (regex.test(input)) return Number(input);\n\n        return NaN;\n    }\n\n    isGitInstalled(callback) {\n        this.gitExec('--version', (code) => {\n            if (code !== 0) {\n                this.warning('git is not found on your computer.\\n',\n                    ` Install git: ${chalk.yellow('https://git-scm.com/')}`\n                );\n            }\n            if (callback) callback(code);\n        });\n    }\n\n    getOptionFromArray(array, option) {\n        let optionValue = false;\n        array.forEach((value) => {\n            if (_.includes(value, option)) {\n                optionValue = value.split(':')[1];\n            }\n        });\n        optionValue = optionValue === 'true' ? true : optionValue;\n        return optionValue;\n    }\n\n    /**\n     * get hibernate SnakeCase in JHipster preferred style.\n     *\n     * @param {string} value - table column name or table name string\n     * @see org.springframework.boot.orm.jpa.hibernate.SpringNamingStrategy\n     */\n    hibernateSnakeCase(value) {\n        let res = '';\n        if (value) {\n            value = value.replace('.', '_');\n            res = value[0];\n            for (let i = 1, len = value.length - 1; i < len; i++) {\n                if (value[i - 1] !== value[i - 1].toUpperCase() &&\n                    value[i] !== value[i].toLowerCase() &&\n                    value[i + 1] !== value[i + 1].toUpperCase()\n                ) {\n                    res += `_${value[i]}`;\n                } else {\n                    res += value[i];\n                }\n            }\n            res += value[value.length - 1];\n            res = res.toLowerCase();\n        }\n        return res;\n    }\n\n    contains(array, item) {\n        return _.includes(array, item);\n    }\n    /**\n     * Function to issue a https get request, and process the result\n     *\n     *  @param {string} url - the url to fetch\n     *  @param onSuccess - function, which gets called when the request succeeds, with the body of the response\n     *  @param onFail - callback when the get failed.\n     */\n    httpsGet(url, onSuccess, onFail) {\n        https.get(url, (res) => {\n            let body = '';\n            res.on('data', (chunk) => {\n                body += chunk;\n            });\n            res.on('end', () => {\n                onSuccess(body);\n            });\n        }).on('error', onFail);\n    }\n\n    /**\n     * Function to print a proper array with simple quoted strings\n     *\n     *  @param {array} array - the array to print\n     */\n    toArrayString(array) {\n        return `['${array.join('\\', \\'')}']`;\n    }\n\n    /**\n     * Strip margin indicated by pipe `|` from a string literal\n     */\n    stripMargin(content) {\n        return content.replace(/^[ ]*\\|/gm, '');\n    }\n\n    /**\n     * Utility function to copy and process templates.\n     *\n     * @param {string} source\n     * @param {string} destination\n     * @param {*} generator\n     * @param {*} options\n     * @param {*} context\n     */\n    template(source, destination, generator, options = {}, context) {\n        const _this = generator || this;\n        const _context = context || _this;\n        jhipsterUtils.renderContent(source, _this, _context, options, (res) => {\n            _this.fs.write(_this.destinationPath(destination), res);\n        });\n    }\n\n    /**\n     * Utility function to copy files.\n     *\n     * @param {string} source - Original file.\n     * @param {string} destination - The resulting file.\n     */\n    copy(source, destination) {\n        this.fs.copy(this.templatePath(source), this.destinationPath(destination));\n    }\n\n    /**\n     * Print a debug message.\n     *\n     * @param {string} value - message to print\n     */\n    debug(msg) {\n        this.log(`${chalk.yellow.bold('DEBUG!')} ${msg}`);\n    }\n\n    checkJava() {\n        if (this.skipChecks || this.skipServer) return;\n        const done = this.async();\n        exec('java -version', (err, stdout, stderr) => {\n            if (err) {\n                this.warning('Java 8 is not found on your computer.');\n            } else {\n                const javaVersion = stderr.match(/(?:java|openjdk) version \"(.*)\"/)[1];\n                if (!javaVersion.match(/1\\.8/)) {\n                    this.warning(`Java 8 is not found on your computer. Your Java version is: ${chalk.yellow(javaVersion)}`);\n                }\n            }\n            done();\n        });\n    }\n\n    checkNode() {\n        if (this.skipChecks || this.skipServer) return;\n        const done = this.async();\n        exec('node -v', (err, stdout, stderr) => {\n            if (err) {\n                this.warning('NodeJS is not found on your system.');\n            } else {\n                const nodeVersion = semver.clean(stdout);\n                const nodeFromPackageJson = packagejs.engines.node;\n                if (!semver.satisfies(nodeVersion, nodeFromPackageJson)) {\n                    this.warning(`Your NodeJS version is too old (${nodeVersion}). You should use at least NodeJS ${chalk.bold(nodeFromPackageJson)}`);\n                }\n            }\n            done();\n        });\n    }\n\n    checkGit() {\n        if (this.skipChecks || this.skipClient) return;\n        const done = this.async();\n        this.isGitInstalled((code) => {\n            this.gitInstalled = code === 0;\n            done();\n        });\n    }\n\n    checkGitConnection() {\n        if (!this.gitInstalled) return;\n        const done = this.async();\n        exec('git ls-remote git://github.com/jhipster/generator-jhipster.git HEAD', { timeout: 15000 }, (error) => {\n            if (error) {\n                this.warning(`Failed to connect to \"git://github.com\"\n                     1. Check your Internet connection.\n                     2. If you are using an HTTP proxy, try this command: ${chalk.yellow('git config --global url.\"https://\".insteadOf git://')}`\n                );\n            }\n            done();\n        });\n    }\n\n    checkYarn() {\n        if (this.skipChecks || !this.useYarn) return;\n        const done = this.async();\n        exec('yarn --version', (err) => {\n            if (err) {\n                this.warning('yarn is not found on your computer.\\n',\n                    ' Using npm instead');\n                this.useYarn = false;\n            } else {\n                this.useYarn = true;\n            }\n            done();\n        });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/node_modules/generator-jhipster/generators/util.js":"const path = require('path');\nconst html = require('html-wiring');\nconst shelljs = require('shelljs');\nconst ejs = require('ejs');\nconst _ = require('lodash');\nconst constants = require('./generator-constants');\n\nconst LANGUAGES_MAIN_SRC_DIR = `../../languages/templates/${constants.CLIENT_MAIN_SRC_DIR}`;\n\nmodule.exports = {\n    rewrite,\n    rewriteFile,\n    replaceContent,\n    classify,\n    rewriteJSONFile,\n    copyWebResource,\n    renderContent,\n    deepFind,\n    getJavadoc\n};\n\nfunction rewriteFile(args, generator) {\n    args.path = args.path || process.cwd();\n    const fullPath = path.join(args.path, args.file);\n\n    args.haystack = generator.fs.read(fullPath);\n    const body = rewrite(args);\n    generator.fs.write(fullPath, body);\n}\n\nfunction replaceContent(args, generator) {\n    args.path = args.path || process.cwd();\n    const fullPath = path.join(args.path, args.file);\n\n    const re = args.regex ? new RegExp(args.pattern, 'g') : args.pattern;\n\n    let body = generator.fs.read(fullPath);\n    body = body.replace(re, args.content);\n    generator.fs.write(fullPath, body);\n}\n\nfunction escapeRegExp(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&'); // eslint-disable-line\n}\n\nfunction rewrite(args) {\n    // check if splicable is already in the body text\n    const re = new RegExp(args.splicable.map(line => `\\\\s*${escapeRegExp(line)}`).join('\\n'));\n\n    if (re.test(args.haystack)) {\n        return args.haystack;\n    }\n\n    const lines = args.haystack.split('\\n');\n\n    let otherwiseLineIndex = -1;\n    lines.forEach((line, i) => {\n        if (line.indexOf(args.needle) !== -1) {\n            otherwiseLineIndex = i;\n        }\n    });\n\n    let spaces = 0;\n    while (lines[otherwiseLineIndex].charAt(spaces) === ' ') {\n        spaces += 1;\n    }\n\n    let spaceStr = '';\n\n    while ((spaces -= 1) >= 0) { // eslint-disable-line no-cond-assign\n        spaceStr += ' ';\n    }\n\n    lines.splice(otherwiseLineIndex, 0, args.splicable.map(line => spaceStr + line).join('\\n'));\n\n    return lines.join('\\n');\n}\n\n// _.classify uses _.titleize which lowercase the string,\n// so if the user chooses a proper ClassName it will not rename properly\nfunction classify(string) {\n    string = string.replace(/[\\W_](\\w)/g, match => ` ${match[1].toUpperCase()}`).replace(/\\s/g, '');\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction rewriteJSONFile(filePath, rewriteFile, generator) {\n    const jsonObj = generator.fs.readJSON(filePath);\n    rewriteFile(jsonObj, generator);\n    generator.fs.writeJSON(filePath, jsonObj, null, 4);\n}\n\nfunction copyWebResource(source, dest, regex, type, generator, opt = {}, template) {\n    if (generator.enableTranslation) {\n        generator.template(source, dest, generator, opt);\n    } else {\n        renderContent(source, generator, generator, opt, (body) => {\n            body = body.replace(regex, '');\n            switch (type) {\n            case 'html' :\n                body = replacePlaceholders(body, generator);\n                break;\n            case 'js' :\n                body = replaceTitle(body, generator);\n                break;\n            default:\n                break;\n            }\n            generator.fs.write(dest, body);\n        });\n    }\n}\n\nfunction renderContent(source, generator, context, options, cb) {\n    ejs.renderFile(generator.templatePath(source), context, options, (err, res) => {\n        if (!err) {\n            cb(res);\n        } else {\n            generator.error(`Copying template ${source} failed. [${err}]`);\n        }\n    });\n}\n\nfunction replaceTitle(body, generator) {\n    const re = /pageTitle[\\s]*:[\\s]*['|\"]([a-zA-Z0-9.\\-_]+)['|\"]/g;\n    let match;\n\n    while ((match = re.exec(body)) !== null) { // eslint-disable-line no-cond-assign\n        // match is now the next match, in array form and our key is at index 1, index 1 is replace target.\n        const key = match[1];\n        const target = key;\n        const jsonData = geti18nJson(key, generator);\n        const keyValue = jsonData !== undefined ? deepFind(jsonData, key) : undefined;\n\n        body = body.replace(target, keyValue !== undefined ? keyValue : generator.baseName);\n    }\n\n    return body;\n}\n\nfunction replacePlaceholders(body, generator) {\n    const re = /placeholder=['|\"]([{]{2}['|\"]([a-zA-Z0-9.\\-_]+)['|\"][\\s][|][\\s](translate)[}]{2})['|\"]/g;\n    let match;\n\n    while ((match = re.exec(body)) !== null) { // eslint-disable-line no-cond-assign\n        // match is now the next match, in array form and our key is at index 2, index 1 is replace target.\n        const key = match[2];\n        const target = match[1];\n        const jsonData = geti18nJson(key, generator);\n        const keyValue = jsonData !== undefined ? deepFind(jsonData, key, true) : undefined; // dirty fix to get placeholder as it is not in proper json format, name has a dot in it. Assuming that all placeholders are in similar format\n\n        body = body.replace(target, keyValue !== undefined ? keyValue : '');\n    }\n\n    return body;\n}\n\nfunction geti18nJson(key, generator) {\n    const i18nDirectory = `${LANGUAGES_MAIN_SRC_DIR}i18n/en/`;\n    const name = _.kebabCase(key.split('.')[0]);\n    let filename = `${i18nDirectory + name}.json`;\n    let render;\n\n    if (!shelljs.test('-f', path.join(generator.sourceRoot(), filename))) {\n        filename = `${i18nDirectory}_${name}.json`;\n        render = true;\n    }\n    try {\n        let file = html.readFileAsString(path.join(generator.sourceRoot(), filename));\n\n        file = render ? ejs.render(file, generator, {}) : file;\n        file = JSON.parse(file);\n        return file;\n    } catch (err) {\n        generator.log(err);\n        generator.log(`Error in file: ${filename}`);\n        // 'Error reading translation file!'\n        return undefined;\n    }\n}\n\nfunction deepFind(obj, path, placeholder) {\n    const paths = path.split('.');\n    let current = obj;\n    if (placeholder) { // dirty fix for placeholders, the json files needs to be corrected\n        paths[paths.length - 2] = `${paths[paths.length - 2]}.${paths[paths.length - 1]}`;\n        paths.pop();\n    }\n    for (let i = 0; i < paths.length; ++i) {\n        if (current[paths[i]] === undefined) {\n            return undefined;\n        }\n        current = current[paths[i]];\n    }\n    return current;\n}\n\nfunction getJavadoc(text, indentSize) {\n    let javadoc = `${_.repeat(' ', indentSize)}/**`;\n    const rows = text.split('\\n');\n    for (let i = 0; i < rows.length; i++) {\n        javadoc = `${javadoc}\\n${_.repeat(' ', indentSize)} * ${rows[i]}`;\n    }\n    javadoc = `${javadoc}\\n${_.repeat(' ', indentSize)} */`;\n    return javadoc;\n}\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/node_modules/generator-jhipster/generators/app/prompts.js":"const chalk = require('chalk');\n\nmodule.exports = {\n    askForInsightOptIn,\n    askForApplicationType,\n    askForModuleName,\n    askFori18n,\n    askForTestOpts,\n    askForMoreModules\n};\n\nfunction askForInsightOptIn() {\n    if (this.existingProject) return;\n\n    const done = this.async();\n    const insight = this.insight();\n\n    this.prompt({\n        when: () => insight.optOut === undefined,\n        type: 'confirm',\n        name: 'insight',\n        message: `May ${chalk.cyan('JHipster')} anonymously report usage statistics to improve the tool over time?`,\n        default: true\n    }).then((prompt) => {\n        if (prompt.insight !== undefined) {\n            insight.optOut = !prompt.insight;\n        }\n        done();\n    });\n}\n\nfunction askForApplicationType() {\n    if (this.existingProject) return;\n\n    const DEFAULT_APPTYPE = 'monolith';\n    if (this.skipServer) {\n        this.applicationType = this.configOptions.applicationType = DEFAULT_APPTYPE;\n        return;\n    }\n\n    const done = this.async();\n\n    this.prompt({\n        type: 'list',\n        name: 'applicationType',\n        message: response => this.getNumberedQuestion('Which *type* of application would you like to create?', true),\n        choices: [\n            {\n                value: DEFAULT_APPTYPE,\n                name: 'Monolithic application (recommended for simple projects)'\n            },\n            {\n                value: 'microservice',\n                name: 'Microservice application'\n            },\n            {\n                value: 'gateway',\n                name: 'Microservice gateway'\n            },\n            {\n                value: 'uaa',\n                name: '[BETA] JHipster UAA server (for microservice OAuth2 authentication)'\n            }\n        ],\n        default: DEFAULT_APPTYPE\n    }).then((prompt) => {\n        this.applicationType = this.configOptions.applicationType = prompt.applicationType;\n        done();\n    });\n}\n\nfunction askForModuleName() {\n    if (this.existingProject) return;\n\n    this.askModuleName(this);\n    this.configOptions.lastQuestion = this.currentQuestion;\n    this.configOptions.totalQuestions = this.totalQuestions;\n}\n\nfunction askFori18n() {\n    this.currentQuestion = this.configOptions.lastQuestion;\n    this.totalQuestions = this.configOptions.totalQuestions;\n    if (this.skipI18n || this.existingProject) return;\n    this.aski18n(this);\n}\n\nfunction askForTestOpts() {\n    if (this.existingProject) return;\n\n    const choices = [];\n    const defaultChoice = [];\n    if (!this.skipServer) {\n        // all server side test frameworks should be added here\n        choices.push(\n            { name: 'Gatling', value: 'gatling' },\n            { name: 'Cucumber', value: 'cucumber' }\n        );\n    }\n    if (!this.skipClient) {\n        // all client side test frameworks should be added here\n        choices.push(\n            { name: 'Protractor', value: 'protractor' }\n        );\n    }\n    const done = this.async();\n\n    this.prompt({\n        type: 'checkbox',\n        name: 'testFrameworks',\n        message: response => this.getNumberedQuestion('Besides JUnit and Karma, which testing frameworks would you like to use?', true),\n        choices,\n        default: defaultChoice\n    }).then((prompt) => {\n        this.testFrameworks = prompt.testFrameworks;\n        done();\n    });\n}\n\nfunction askForMoreModules() {\n    if (this.existingProject) {\n        return;\n    }\n\n    const done = this.async();\n    this.prompt({\n        type: 'confirm',\n        name: 'installModules',\n        message: response => this.getNumberedQuestion('Would you like to install other generators from the JHipster Marketplace?', true),\n        default: false\n    }).then((prompt) => {\n        if (prompt.installModules) {\n            askModulesToBeInstalled(done, this);\n        } else {\n            done();\n        }\n    });\n}\n\nfunction askModulesToBeInstalled(done, generator) {\n    generator.httpsGet('https://api.npms.io/v2/search?q=keywords:jhipster-module&from=0&size=50', (body) => {\n        const moduleResponse = JSON.parse(body);\n        const choices = [];\n        moduleResponse.results.forEach((modDef) => {\n            choices.push({\n                value: { name: modDef.package.name, version: modDef.package.version },\n                name: `(${modDef.package.name}-${modDef.package.version}) ${modDef.package.description}`\n            });\n        });\n        if (choices.length > 0) {\n            generator.prompt({\n                type: 'checkbox',\n                name: 'otherModules',\n                message: 'Which other modules would you like to use?',\n                choices,\n                default: []\n            }).then((prompt) => {\n                // [ {name: [moduleName], version:[version]}, ...]\n                generator.otherModules = [];\n                prompt.otherModules.forEach((module) => {\n                    generator.otherModules.push({ name: module.name, version: module.version });\n                });\n                generator.configOptions.otherModules = generator.otherModules;\n                done();\n            });\n        } else {\n            done();\n        }\n    }, (error) => {\n        generator.warning(`Unable to contact server to fetch additional modules: ${error.message}`);\n        done();\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/node_modules/generator-jhipster/generators/aws/index.js":"const util = require('util');\nconst generator = require('yeoman-generator');\nconst chalk = require('chalk');\nconst BaseGenerator = require('../generator-base');\nconst prompts = require('./prompts');\nconst AwsFactory = require('./lib/aws.js');\n\nconst AwsGenerator = generator.extend({});\n\nutil.inherits(AwsGenerator, BaseGenerator);\n\nmodule.exports = AwsGenerator.extend({\n    initializing: {\n        initAws() {\n            const done = this.async();\n            this.awsFactory = new AwsFactory(this, done);\n        },\n        getGlobalConfig() {\n            this.existingProject = false;\n            this.baseName = this.config.get('baseName');\n            this.buildTool = this.config.get('buildTool');\n        },\n        getAwsConfig() {\n            const awsConfig = this.config.get('aws');\n\n            if (awsConfig) {\n                this.existingProject = true;\n                this.applicationName = awsConfig.applicationName;\n                this.environmentName = awsConfig.environmentName;\n                this.bucketName = awsConfig.bucketName;\n                this.instanceType = awsConfig.instanceType;\n                this.awsRegion = awsConfig.awsRegion;\n                this.dbName = awsConfig.dbName;\n                this.dbInstanceClass = awsConfig.dbInstanceClass;\n\n                this.log(chalk.green('This is an existing deployment, using the configuration from your .yo-rc.json file \\n' +\n                    'to deploy your application...\\n'));\n            }\n        },\n        checkDatabase() {\n            const prodDatabaseType = this.config.get('prodDatabaseType');\n\n            switch (prodDatabaseType.toLowerCase()) {\n            case 'mysql':\n                this.dbEngine = 'mysql';\n                break;\n            case 'postgresql':\n                this.dbEngine = 'postgres';\n                break;\n            default:\n                this.error(chalk.red('Sorry deployment for this database is not possible'));\n            }\n        }\n    },\n\n    prompting: prompts.prompting,\n\n    configuring: {\n        insight() {\n            const insight = this.insight();\n            insight.trackWithEvent('generator', 'aws');\n        },\n        createAwsFactory() {\n            const cb = this.async();\n            this.awsFactory.init({ region: this.awsRegion });\n            cb();\n        },\n        saveConfig() {\n            this.config.set('aws', {\n                applicationName: this.applicationName,\n                environmentName: this.environmentName,\n                bucketName: this.bucketName,\n                instanceType: this.instanceType,\n                awsRegion: this.awsRegion,\n                dbName: this.dbName,\n                dbInstanceClass: this.dbInstanceClass\n            });\n        }\n    },\n\n    default: {\n        productionBuild() {\n            const cb = this.async();\n            this.log(chalk.bold('Building application'));\n\n            const child = this.buildApplication(this.buildTool, 'prod', (err) => {\n                if (err) {\n                    this.error(chalk.red(err));\n                } else {\n                    cb();\n                }\n            });\n\n            child.stdout.on('data', (data) => {\n                this.log(data.toString());\n            });\n        },\n        createBucket() {\n            const cb = this.async();\n            this.log();\n            this.log(chalk.bold('Create S3 bucket'));\n\n            const s3 = this.awsFactory.getS3();\n\n            s3.createBucket({ bucket: this.bucketName }, (err, data) => {\n                if (err) {\n                    this.error(chalk.red(err.message));\n                } else {\n                    this.log(data.message);\n                    cb();\n                }\n            });\n        },\n        uploadWar() {\n            const cb = this.async();\n            this.log();\n            this.log(chalk.bold('Upload WAR to S3'));\n\n            const s3 = this.awsFactory.getS3();\n\n            const params = {\n                bucket: this.bucketName,\n                buildTool: this.buildTool\n            };\n\n            s3.uploadWar(params, (err, data) => {\n                if (err) {\n                    this.error(chalk.red(err.message));\n                } else {\n                    this.warKey = data.warKey;\n                    this.log(data.message);\n                    cb();\n                }\n            });\n        },\n        createDatabase() {\n            const cb = this.async();\n            this.log();\n            this.log(chalk.bold('Create database'));\n\n            const rds = this.awsFactory.getRds();\n\n            const params = {\n                dbInstanceClass: this.dbInstanceClass,\n                dbName: this.dbName,\n                dbEngine: this.dbEngine,\n                dbPassword: this.dbPassword,\n                dbUsername: this.dbUsername\n            };\n\n            rds.createDatabase(params, (err, data) => {\n                if (err) {\n                    this.error(chalk.red(err.message));\n                } else {\n                    this.log(data.message);\n                    cb();\n                }\n            });\n        },\n        createDatabaseUrl() {\n            const cb = this.async();\n            this.log();\n            this.log(chalk.bold('Waiting for database (This may take several minutes)'));\n\n            if (this.dbEngine === 'postgres') {\n                this.dbEngine = 'postgresql';\n            }\n\n            const rds = this.awsFactory.getRds();\n\n            const params = {\n                dbName: this.dbName,\n                dbEngine: this.dbEngine\n            };\n\n            rds.createDatabaseUrl(params, (err, data) => {\n                if (err) {\n                    this.error(chalk.red(err.message));\n                } else {\n                    this.dbUrl = data.dbUrl;\n                    this.log(data.message);\n                    cb();\n                }\n            });\n        },\n        createApplication() {\n            const cb = this.async();\n            this.log();\n            this.log(chalk.bold('Create/Update application'));\n\n            const eb = this.awsFactory.getEb();\n\n            const params = {\n                applicationName: this.applicationName,\n                bucketName: this.bucketName,\n                warKey: this.warKey,\n                environmentName: this.environmentName,\n                dbUrl: this.dbUrl,\n                dbUsername: this.dbUsername,\n                dbPassword: this.dbPassword,\n                instanceType: this.instanceType\n            };\n\n            eb.createApplication(params, (err, data) => {\n                if (err) {\n                    this.error(chalk.red(err.message));\n                } else {\n                    this.log(data.message);\n                    cb();\n                }\n            });\n        }\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/node_modules/generator-jhipster/generators/aws/prompts.js":"const _ = require('lodash');\n\nmodule.exports = {\n    prompting\n};\n\nfunction prompting() {\n    if (this.existingProject) {\n        return;\n    }\n\n    const done = this.async();\n\n    const prompts = [\n        {\n            type: 'input',\n            name: 'applicationName',\n            message: 'Application name:',\n            default: this.baseName\n        },\n        {\n            type: 'input',\n            name: 'environmentName',\n            message: 'Environment name:',\n            default: `${this.baseName}-env`\n        },\n        {\n            type: 'input',\n            name: 'bucketName',\n            message: 'Name of S3 bucket:',\n            default: this.baseName\n        },\n        {\n            type: 'input',\n            name: 'dbName',\n            message: 'Database name:',\n            default: this.baseName\n        },\n        {\n            type: 'input',\n            name: 'dbUsername',\n            message: 'Database username:',\n            validate: (input) => {\n                if (input === '') return 'Please provide a username';\n                return true;\n            }\n        },\n        {\n            type: 'password',\n            name: 'dbPassword',\n            message: 'Database password:',\n            validate: (input) => {\n                if (input === '') return 'Please provide a password';\n                else if (input.length < 8) return 'Password must contain minimum 8 chars';\n                return true;\n            }\n        },\n        {\n            type: 'list',\n            name: 'instanceType',\n            message: 'On which EC2 instance type do you want to deploy?',\n            choices: ['t2.micro', 't2.small', 't2.medium', 'm3.large', 'm3.xlarge', 'm3.2xlarge', 'c3.large', 'c3.xlarge',\n                'c3.2xlarge', 'c3.4xlarge', 'c3.8xlarge', 'hs1.8xlarge', 'i2.xlarge', 'i2.2xlarge', 'i2.4xlarge',\n                'i2.8xlarge', 'r3.large', 'r3.xlarge', 'r3.2xlarge'],\n            default: 0\n        },\n        {\n            type: 'list',\n            name: 'dbInstanceClass',\n            message: 'On which RDS instance class do you want to deploy?',\n            choices: ['db.t1.micro', 'db.m1.small', 'db.m1.medium', 'db.m1.large', 'db.m1.xlarge', 'db.m2.xlarge ',\n                'db.m2.2xlarge', 'db.m2.4xlarge', 'db.m3.medium', 'db.m3.large', 'db.m3.xlarge', 'db.m3.2xlarge',\n                'db.r3.large', 'db.r3.xlarge', 'db.r3.2xlarge', 'db.r3.4xlarge', 'db.r3.8xlarge', 'db.t2.micro',\n                'db.t2.small', 'db.t2.medium'],\n            default: 17\n        },\n        {\n            type: 'list',\n            name: 'awsRegion',\n            message: 'On which region do you want to deploy?',\n            choices: ['ap-northeast-1', 'ap-southeast-1', 'ap-southeast-2', 'eu-central-1', 'eu-west-1', 'sa-east-1',\n                'us-east-1', 'us-west-1', 'us-west-2'],\n            default: 3\n        }];\n\n    this.prompt(prompts).then((props) => {\n        this.applicationName = _.kebabCase(props.applicationName);\n        this.environmentName = _.kebabCase(props.environmentName);\n        this.bucketName = _.kebabCase(props.bucketName);\n        this.instanceType = props.instanceType;\n        this.awsRegion = props.awsRegion;\n        this.dbName = props.dbName;\n        this.dbUsername = props.dbUsername;\n        this.dbPassword = props.dbPassword;\n        this.dbInstanceClass = props.dbInstanceClass;\n\n        done();\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/node_modules/generator-jhipster/generators/aws/lib/aws.js":"const S3 = require('./s3.js');\nconst Rds = require('./rds.js');\nconst shelljs = require('shelljs');\nconst Eb = require('./eb.js');\n\nlet Aws;\nlet generator;\n\nconst AwsFactory = module.exports = function AwsFactory(generatorRef, cb) {\n    generator = generatorRef;\n    try {\n        Aws = require('aws-sdk'); // eslint-disable-line\n        cb();\n    } catch (e) {\n        generator.log('Installing AWS dependencies into your JHipster folder');\n        let installCommand = 'yarn add aws-sdk progress uuid --modules-folder node_modules/generator-jhipster/node_modules';\n        if (generator.config.get('clientPackageManager') === 'npm') {\n            installCommand = 'npm install aws-sdk progress uuid --prefix node_modules/generator-jhipster';\n        }\n        shelljs.exec(installCommand, { silent: true }, (code, msg, err) => {\n            if (code !== 0) generator.error(`Something went wrong while installing:\\n${err}`);\n            Aws = require('aws-sdk'); // eslint-disable-line\n            cb();\n        });\n    }\n};\n\nAwsFactory.prototype.init = function initAws(options) {\n    Aws.config.region = options.region;\n};\n\nAwsFactory.prototype.getS3 = function getS3() {\n    return new S3(Aws, generator);\n};\n\nAwsFactory.prototype.getRds = function getRds() {\n    return new Rds(Aws, generator);\n};\n\nAwsFactory.prototype.getEb = function getEb() {\n    return new Eb(Aws, generator);\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/node_modules/generator-jhipster/generators/aws/lib/s3.js":"const fs = require('fs');\n\nconst FILE_EXTENSION = '.original';\nconst S3_STANDARD_REGION = 'us-east-1';\n\nlet Progressbar;\n\n\nconst S3 = module.exports = function S3(Aws, generator) {\n    this.Aws = Aws;\n    try {\n        Progressbar = require('progress'); // eslint-disable-line\n    } catch (e) {\n        generator.error(`Something went wrong while running jhipster:aws:\\n${e}`);\n    }\n};\n\nS3.prototype.createBucket = function createBucket(params, callback) {\n    const bucket = params.bucket;\n    const region = this.Aws.config.region;\n\n    const s3Params = {\n        Bucket: bucket,\n        CreateBucketConfiguration: { LocationConstraint: region }\n    };\n\n    if (region.toLowerCase() === S3_STANDARD_REGION) {\n        s3Params.CreateBucketConfiguration = undefined;\n    }\n\n    const s3 = new this.Aws.S3({\n        params: s3Params,\n        signatureVersion: 'v4'\n    });\n\n    s3.headBucket((err) => {\n        if (err && err.statusCode === 404) {\n            s3.createBucket((err) => {\n                if (err) {\n                    error(err.message, callback);\n                } else {\n                    success(`Bucket ${bucket} created successful`, callback);\n                }\n            });\n        } else if (err && err.statusCode === 301) {\n            error(`Bucket ${bucket} is already in use`, callback);\n        } else if (err) {\n            error(err.message, callback);\n        } else {\n            success(`Bucket ${bucket} already exists`, callback);\n        }\n    });\n};\n\nS3.prototype.uploadWar = function uploadWar(params, callback) {\n    const bucket = params.bucket;\n    const buildTool = params.buildTool;\n    let buildFolder;\n\n    if (buildTool === 'gradle') {\n        buildFolder = 'build/libs/';\n    } else {\n        buildFolder = 'target/';\n    }\n\n    findWarFilename(buildFolder, (err, warFilename) => {\n        if (err) {\n            error(err, callback);\n        } else {\n            const warKey = warFilename.slice(0, -FILE_EXTENSION.length);\n\n            const s3 = new this.Aws.S3({\n                params: {\n                    Bucket: bucket,\n                    Key: warKey\n                },\n                signatureVersion: 'v4',\n                httpOptions: { timeout: 600000 }\n            });\n\n            const filePath = buildFolder + warFilename;\n            const body = fs.createReadStream(filePath);\n\n            uploadToS3(s3, body, (err, message) => {\n                if (err) {\n                    error(err.message, callback);\n                } else {\n                    callback(null, { message, warKey });\n                }\n            });\n        }\n    });\n};\n\nfunction findWarFilename(buildFolder, callback) {\n    let warFilename = '';\n    fs.readdir(buildFolder, (err, files) => {\n        if (err) {\n            error(err, callback);\n        }\n        files.filter(file => file.substr(-FILE_EXTENSION.length) === FILE_EXTENSION)\n        .forEach((file) => {\n            warFilename = file;\n        });\n        callback(null, warFilename);\n    });\n}\n\nfunction uploadToS3(s3, body, callback) {\n    let bar;\n\n    s3.waitFor('bucketExists', (err) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            s3.upload({ Body: body }).on('httpUploadProgress', (evt) => {\n                if (bar === undefined && evt.total) {\n                    const total = evt.total / 1000000;\n                    bar = new Progressbar('uploading [:bar] :percent :etas', {\n                        complete: '=',\n                        incomplete: ' ',\n                        width: 20,\n                        total,\n                        clear: true\n                    });\n                }\n\n                const curr = evt.loaded / 1000000;\n                bar.tick(curr - bar.curr);\n            }).send((err) => {\n                if (err) {\n                    callback(err, null);\n                } else {\n                    callback(null, 'War uploaded successful');\n                }\n            });\n        }\n    });\n}\n\nfunction success(message, callback) {\n    callback(null, { message });\n}\n\nfunction error(message, callback) {\n    callback({ message }, null);\n}\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/node_modules/generator-jhipster/generators/aws/lib/rds.js":"let aws;\n\nconst Rds = module.exports = function Rds(Aws) {\n    aws = Aws;\n};\n\nRds.prototype.createDatabase = function createDatabase(params, callback) {\n    const dbInstanceClass = params.dbInstanceClass;\n    const dbName = params.dbName;\n    const dbEngine = params.dbEngine;\n    const dbPassword = params.dbPassword;\n    const dbUsername = params.dbUsername;\n\n    createRdsSecurityGroup({ rdsSecurityGroupName: dbName }, (err, data) => {\n        if (err) {\n            callback({ message: err.message }, null);\n        } else {\n            const rdsSecurityGroupId = data.rdsSecurityGroupId;\n\n            if (!rdsSecurityGroupId) {\n                callback(null, { message: `Database ${dbName} already exists` });\n            } else {\n                authorizeSecurityGroupIngress({ rdsSecurityGroupId }, (err) => {\n                    if (err) {\n                        callback({ message: err.message }, null);\n                    } else {\n                        createDbInstance({\n                            dbInstanceClass,\n                            dbName,\n                            dbEngine,\n                            dbPassword,\n                            dbUsername,\n                            rdsSecurityGroupId\n                        }, (err, data) => {\n                            if (err) {\n                                callback({ message: err.message }, null);\n                            } else {\n                                callback(null, { message: data.message });\n                            }\n                        });\n                    }\n                });\n            }\n        }\n    });\n};\n\nRds.prototype.createDatabaseUrl = function createDatabaseUrl(params, callback) {\n    const rds = new aws.RDS();\n    const dbName = params.dbName;\n    const dbEngine = params.dbEngine;\n\n    rds.waitFor('dBInstanceAvailable', { DBInstanceIdentifier: dbName }, (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            const dbEndpoint = data.DBInstances[0].Endpoint;\n            const dbUrl = `jdbc:${dbEngine}://${dbEndpoint.Address}:${dbEndpoint.Port}/${dbName}`;\n            const message = `Database available at ${dbUrl}`;\n            callback(null, { message, dbUrl });\n        }\n    });\n};\n\nfunction createRdsSecurityGroup(params, callback) {\n    const ec2 = new aws.EC2();\n\n    const securityGroupParams = {\n        Description: 'Enable database access to Beanstalk application',\n        GroupName: params.rdsSecurityGroupName\n    };\n\n    ec2.createSecurityGroup(securityGroupParams, (err, data) => {\n        if (err && err.code === 'InvalidGroup.Duplicate') {\n            callback(null, { message: `Security group ${params.rdsSecurityGroupName} already exists` });\n        } else if (err) {\n            callback(err, null);\n        } else {\n            callback(null, { rdsSecurityGroupId: data.GroupId });\n        }\n    });\n}\n\nfunction authorizeSecurityGroupIngress(params, callback) {\n    const ec2 = new aws.EC2();\n\n    const securityGroupParams = {\n        GroupId: params.rdsSecurityGroupId,\n        IpProtocol: 'tcp',\n        FromPort: 0,\n        ToPort: 65535,\n        CidrIp: '0.0.0.0/0'\n    };\n\n    ec2.authorizeSecurityGroupIngress(securityGroupParams, (err) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, { message: 'Create security group successful' });\n        }\n    });\n}\n\nfunction createDbInstance(params, callback) {\n    const rds = new aws.RDS();\n\n    const dbInstanceParams = {\n        AllocatedStorage: 5,\n        DBInstanceClass: params.dbInstanceClass,\n        DBInstanceIdentifier: params.dbName,\n        Engine: params.dbEngine,\n        MasterUserPassword: params.dbPassword,\n        MasterUsername: params.dbUsername,\n        DBName: params.dbName,\n        VpcSecurityGroupIds: [params.rdsSecurityGroupId],\n        MultiAZ: false,\n        Iops: 0\n    };\n\n    rds.createDBInstance(dbInstanceParams, (err) => {\n        if (err && err.code === 'DBInstanceAlreadyExists') {\n            callback(null, { message: 'Database already exists' });\n        } else if (err) {\n            callback(err, null);\n        } else {\n            callback(null, { message: 'Database created successful' });\n        }\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/node_modules/generator-jhipster/generators/aws/lib/eb.js":"let aws;\nlet uuidV4;\n\nconst Eb = module.exports = function Eb(Aws, generator) {\n    aws = Aws;\n    try {\n        uuidV4 = require('uuid/v4'); // eslint-disable-line\n    } catch (e) {\n        generator.error(`Something went wrong while running jhipster:aws:\\n${e}`);\n    }\n};\n\nEb.prototype.createApplication = function createApplication(params, callback) {\n    const applicationName = params.applicationName;\n    const bucketName = params.bucketName;\n    const warKey = params.warKey;\n    const versionLabel = `${this.warKey}-${uuidV4()}`;\n    const environmentName = params.environmentName;\n    const dbUrl = params.dbUrl;\n    const dbUsername = params.dbUsername;\n    const dbPassword = params.dbPassword;\n    const instanceType = params.instanceType;\n\n    const applicationParams = {\n        applicationName,\n        versionLabel,\n        bucketName,\n        warKey\n    };\n\n    createApplicationVersion(applicationParams, (err) => {\n        if (err) {\n            callback({ message: err.message }, null);\n        } else {\n            const environmentParams = {\n                applicationName,\n                environmentName,\n                versionLabel,\n                dbUrl,\n                dbUsername,\n                dbPassword,\n                instanceType\n            };\n\n            checkEnvironment(environmentParams, (err, data) => {\n                if (err) {\n                    callback({ message: err.message }, null);\n                } else if (data.environmentExists) {\n                    updateEnvironment(environmentParams, (err, data) => {\n                        if (err) {\n                            callback({ message: err.message }, null);\n                        } else {\n                            callback(null, { message: data.message });\n                        }\n                    });\n                } else {\n                    createEnvironment(environmentParams, (err, data) => {\n                        if (err) {\n                            callback({ message: err.message }, null);\n                        } else {\n                            callback(null, { message: data.message });\n                        }\n                    });\n                }\n            });\n        }\n    });\n};\n\nfunction createApplicationVersion(params, callback) {\n    const applicationName = params.applicationName;\n    const versionLabel = params.versionLabel;\n    const bucketName = params.bucketName;\n    const warKey = params.warKey;\n\n    const elasticbeanstalk = new aws.ElasticBeanstalk();\n\n    const applicationParams = {\n        ApplicationName: applicationName,\n        VersionLabel: versionLabel,\n        AutoCreateApplication: true,\n        SourceBundle: {\n            S3Bucket: bucketName,\n            S3Key: warKey\n        }\n    };\n\n    elasticbeanstalk.createApplicationVersion(applicationParams, (err) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, { message: `Application version ${applicationName} created successful` });\n        }\n    });\n}\n\nfunction checkEnvironment(params, callback) {\n    const applicationName = params.applicationName;\n    const environmentName = params.environmentName;\n\n    const elasticbeanstalk = new aws.ElasticBeanstalk();\n\n    const environmentParams = {\n        ApplicationName: applicationName,\n        EnvironmentNames: [environmentName]\n    };\n\n    elasticbeanstalk.describeEnvironments(environmentParams, (err, data) => {\n        if (data.Environments.length === 0) {\n            callback(null, { message: `Environment ${environmentName} not exists`, environmentExists: false });\n        } else if (err) {\n            callback(err, null);\n        } else {\n            callback(null, { message: `Environment ${environmentName} already exists`, environmentExists: true });\n        }\n    });\n}\n\nfunction createEnvironment(params, callback) {\n    const applicationName = params.applicationName;\n    const environmentName = params.environmentName;\n    const dbUrl = params.dbUrl;\n    const dbUsername = params.dbUsername;\n    const dbPassword = params.dbPassword;\n    const instanceType = params.instanceType;\n    const versionLabel = params.versionLabel;\n\n    const elasticbeanstalk = new aws.ElasticBeanstalk();\n\n    getLatestSolutionStackName((err, data) => {\n        if (err) callback(err, null);\n\n        const solutionStackName = data.solutionStackName;\n        const environmentParams = {\n            ApplicationName: applicationName,\n            EnvironmentName: environmentName,\n            OptionSettings: [\n                {\n                    Namespace: 'aws:elasticbeanstalk:application:environment',\n                    OptionName: 'spring.profiles.active',\n                    Value: 'prod'\n                },\n                {\n                    Namespace: 'aws:elasticbeanstalk:application:environment',\n                    OptionName: 'spring.datasource.url',\n                    Value: dbUrl\n                },\n                {\n                    Namespace: 'aws:elasticbeanstalk:application:environment',\n                    OptionName: 'spring.datasource.username',\n                    Value: dbUsername\n                },\n                {\n                    Namespace: 'aws:elasticbeanstalk:application:environment',\n                    OptionName: 'spring.datasource.password',\n                    Value: dbPassword\n                },\n                {\n                    Namespace: 'aws:autoscaling:launchconfiguration',\n                    OptionName: 'InstanceType',\n                    Value: instanceType\n                },\n                {\n                    Namespace: 'aws:autoscaling:launchconfiguration',\n                    OptionName: 'IamInstanceProfile',\n                    Value: 'aws-elasticbeanstalk-ec2-role'\n                }\n            ],\n            SolutionStackName: solutionStackName,\n            VersionLabel: versionLabel,\n            Tier: {\n                Name: 'WebServer',\n                Type: 'Standard'\n            }\n        };\n\n        elasticbeanstalk.createEnvironment(environmentParams, (err) => {\n            if (err) callback(err, null);\n            else callback(null, { message: `Environment ${environmentName} created successful` });\n        });\n    });\n}\n\nfunction getLatestSolutionStackName(callback) {\n    const elasticbeanstalk = new aws.ElasticBeanstalk();\n\n    elasticbeanstalk.listAvailableSolutionStacks((err, data) => {\n        if (err) callback(err, null);\n        filterSolutionStackNames(data, callback);\n    });\n\n    function filterSolutionStackNames(data, callback) {\n        const filteredArray = data.SolutionStacks.filter(filterCriteria);\n        callback(null, { solutionStackName: filteredArray[0] });\n    }\n\n    function filterCriteria(element) {\n        return element.indexOf('Tomcat 8') > -1;\n    }\n}\n\nfunction updateEnvironment(params, callback) {\n    const environmentName = params.environmentName;\n    const instanceType = params.instanceType;\n    const versionLabel = params.versionLabel;\n\n    const elasticbeanstalk = new aws.ElasticBeanstalk();\n\n    const environmentParams = {\n        EnvironmentName: environmentName,\n        OptionSettings: [\n            {\n                Namespace: 'aws:autoscaling:launchconfiguration',\n                OptionName: 'InstanceType',\n                Value: instanceType\n            }\n        ],\n        VersionLabel: versionLabel\n    };\n\n    elasticbeanstalk.updateEnvironment(environmentParams, (err) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, { message: `Environment ${environmentName} updated successful` });\n        }\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/node_modules/generator-jhipster/generators/client/files-angular.js":"const mkdirp = require('mkdirp');\nconst constants = require('../generator-constants');\n\n/* Constants use throughout */\nconst MAIN_SRC_DIR = constants.CLIENT_MAIN_SRC_DIR;\nconst TEST_SRC_DIR = constants.CLIENT_TEST_SRC_DIR;\nconst ANGULAR_DIR = constants.ANGULAR_DIR;\n\n/**\n * The default is to use a file path string. It implies use of the template method.\n * For any other config an object { file:.., method:.., template:.. } can be used\n*/\nconst files = {\n    common: [\n        {\n            templates: [\n                '_package.json',\n                '_proxy.conf.json',\n                '_tsconfig.json',\n                '_tsconfig-aot.json',\n                '_tslint.json',\n                '_.angular-cli.json',\n                'webpack/_webpack.common.js',\n                'webpack/_webpack.dev.js',\n                'webpack/_webpack.prod.js',\n                'webpack/_webpack.vendor.js',\n                { file: 'webpack/logo-jhipster.png', method: 'copy' }\n            ]\n        }\n    ],\n    css: [\n        // this css file will be overwritten by the sass generated css if sass is enabled\n        // but this will avoid errors when running app without running sass task first\n        {\n            condition: generator => !generator.useSass,\n            path: MAIN_SRC_DIR,\n            templates: [\n                'content/css/_global.css',\n                'content/css/_vendor.css',\n                'content/css/_documentation.css'\n            ]\n        }\n    ],\n    sass: [\n        {\n            condition: generator => generator.useSass,\n            path: MAIN_SRC_DIR,\n            templates: [\n                'content/scss/_global.scss',\n                'content/scss/_vendor.scss'\n            ]\n        },\n        {\n            condition: generator => generator.useSass,\n            templates: [\n                '_postcss.config.js'\n            ]\n        }\n    ],\n    image: [\n        {\n            path: MAIN_SRC_DIR,\n            templates: [\n                { file: 'content/images/_hipster.png', method: 'copy' },\n                { file: 'content/images/_hipster2x.png', method: 'copy' },\n                { file: 'content/images/_logo-jhipster.png', method: 'copy' }\n            ]\n        }\n    ],\n    swagger: [\n        {\n            path: MAIN_SRC_DIR,\n            templates: [\n                'swagger-ui/_index.html',\n                { file: 'swagger-ui/images/_throbber.gif', method: 'copy' }\n            ]\n        }\n    ],\n    commonWeb: [\n        {\n            path: MAIN_SRC_DIR,\n            templates: [\n                { file: '_favicon.ico', method: 'copy' },\n                '_robots.txt',\n                '_404.html',\n                '_index.html'\n            ]\n        }\n    ],\n    angularApp: [\n        {\n            path: ANGULAR_DIR,\n            templates: [\n                '_app.main.ts',\n                '_app.route.ts',\n                '_app.module.ts',\n                '_app.constants.ts',\n                '_polyfills.ts',\n                '_vendor.ts',\n                'blocks/config/_prod.config.ts',\n                'blocks/config/_uib-pagination.config.ts',\n                // interceptors\n                'blocks/interceptor/_errorhandler.interceptor.ts',\n                'blocks/interceptor/_notification.interceptor.ts',\n                'blocks/interceptor/_http.provider.ts'\n            ]\n        },\n        {\n            condition: generator => generator.authenticationType === 'oauth2' || generator.authenticationType === 'jwt' || generator.authenticationType === 'uaa',\n            path: ANGULAR_DIR,\n            templates: [\n                'blocks/interceptor/_auth.interceptor.ts'\n            ]\n        },\n        {\n            condition: generator => !generator.skipServer,\n            path: ANGULAR_DIR,\n            templates: [\n                'blocks/interceptor/_auth-expired.interceptor.ts'\n            ]\n        }\n    ],\n    angularMain: [\n        {\n            path: ANGULAR_DIR,\n            templates: [\n                // entities\n                'entities/_entity.module.ts',\n                // home module\n                'home/_index.ts',\n                { file: 'home/_home.module.ts', method: 'processJs' },\n                { file: 'home/_home.route.ts', method: 'processJs' },\n                { file: 'home/_home.component.ts', method: 'processJs' },\n                { file: 'home/_home.component.html', method: 'processHtml' },\n                // layouts\n                'layouts/_index.ts',\n                'layouts/_layout-routing.module.ts',\n                'layouts/profiles/_page-ribbon.component.ts',\n                'layouts/profiles/_profile.service.ts',\n                'layouts/profiles/_profile-info.model.ts',\n                'layouts/main/_main.component.ts',\n                'layouts/main/_main.component.html',\n                { file: 'layouts/navbar/_navbar.component.ts', method: 'processJs' },\n                { file: 'layouts/navbar/_navbar.component.html', method: 'processHtml' },\n                'layouts/footer/_footer.component.ts',\n                { file: 'layouts/footer/_footer.component.html', method: 'processHtml' },\n                { file: 'layouts/error/_error.route.ts', method: 'processJs' },\n                { file: 'layouts/error/_error.component.ts', method: 'processJs' },\n                { file: 'layouts/error/_error.component.html', method: 'processHtml' }\n            ]\n        },\n        {\n            condition: generator => generator.enableTranslation,\n            path: ANGULAR_DIR,\n            templates: [\n                'layouts/navbar/_active-menu.directive.ts'\n            ]\n        },\n        {\n            condition: generator => generator.useSass,\n            path: ANGULAR_DIR,\n            templates: [\n                'layouts/profiles/_page-ribbon.scss',\n                'layouts/navbar/_navbar.scss',\n                'home/_home.scss'\n            ]\n        },\n        {\n            condition: generator => !generator.useSass,\n            path: ANGULAR_DIR,\n            templates: [\n                'layouts/profiles/_page-ribbon.css',\n                'layouts/navbar/_navbar.css',\n                'home/_home.css'\n            ]\n        },\n    ],\n    angularAccountModule: [\n        {\n            path: ANGULAR_DIR,\n            templates: [\n                'account/_index.ts',\n                { file: 'account/_account.route.ts', method: 'processJs' },\n                'account/_account.module.ts',\n                { file: 'account/activate/_activate.route.ts', method: 'processJs' },\n                { file: 'account/activate/_activate.component.ts', method: 'processJs' },\n                { file: 'account/activate/_activate.component.html', method: 'processHtml' },\n                'account/activate/_activate.service.ts',\n                { file: 'account/password/_password.route.ts', method: 'processJs' },\n                'account/password/_password-strength-bar.component.ts',\n                { file: 'account/password/_password.component.ts', method: 'processJs' },\n                { file: 'account/password/_password.component.html', method: 'processHtml' },\n                'account/password/_password.service.ts',\n                { file: 'account/register/_register.route.ts', method: 'processJs' },\n                { file: 'account/register/_register.component.ts', method: 'processJs' },\n                { file: 'account/register/_register.component.html', method: 'processHtml' },\n                'account/register/_register.service.ts',\n                { file: 'account/password-reset/init/_password-reset-init.route.ts', method: 'processJs' },\n                { file: 'account/password-reset/init/_password-reset-init.component.ts', method: 'processJs' },\n                { file: 'account/password-reset/init/_password-reset-init.component.html', method: 'processHtml' },\n                'account/password-reset/init/_password-reset-init.service.ts',\n                { file: 'account/password-reset/finish/_password-reset-finish.route.ts', method: 'processJs' },\n                { file: 'account/password-reset/finish/_password-reset-finish.component.ts', method: 'processJs' },\n                { file: 'account/password-reset/finish/_password-reset-finish.component.html', method: 'processHtml' },\n                'account/password-reset/finish/_password-reset-finish.service.ts',\n                { file: 'account/settings/_settings.route.ts', method: 'processJs' },\n                { file: 'account/settings/_settings.component.ts', method: 'processJs' },\n                { file: 'account/settings/_settings.component.html', method: 'processHtml' }\n            ]\n        },\n        {\n            condition: generator => generator.authenticationType === 'session',\n            path: ANGULAR_DIR,\n            templates: [\n                { file: 'account/sessions/_sessions.route.ts', method: 'processJs' },\n                'account/sessions/_session.model.ts',\n                { file: 'account/sessions/_sessions.component.ts', method: 'processJs' },\n                { file: 'account/sessions/_sessions.component.html', method: 'processHtml' },\n                'account/sessions/_sessions.service.ts'\n            ]\n        },\n        {\n            condition: generator => generator.enableSocialSignIn,\n            path: ANGULAR_DIR,\n            templates: [\n                { file: 'account/social/_social.route.ts', method: 'processJs' },\n                { file: 'account/social/_social-register.component.ts', method: 'processJs' },\n                { file: 'account/social/_social-register.component.html', method: 'processHtml' },\n                { file: 'shared/social/_social.component.ts', method: 'processJs' },\n                { file: 'shared/social/_social.component.html', method: 'processHtml' },\n                'shared/social/_social.service.ts'\n            ]\n        },\n        {\n            condition: generator => generator.enableSocialSignIn && generator.authenticationType === 'jwt',\n            path: ANGULAR_DIR,\n            templates: [\n                { file: 'account/social/_social-auth.component.ts', method: 'processJs' },\n            ]\n        },\n        {\n            condition: generator => generator.useSass,\n            path: ANGULAR_DIR,\n            templates: [\n                'account/password/_password-strength-bar.scss'\n            ]\n        },\n        {\n            condition: generator => !generator.useSass,\n            path: ANGULAR_DIR,\n            templates: [\n                'account/password/_password-strength-bar.css'\n            ]\n        }\n    ],\n    angularAdminModule: [\n        {\n            path: ANGULAR_DIR,\n            templates: [\n                'admin/_index.ts',\n                { file: 'admin/_admin.route.ts', method: 'processJs' },\n                'admin/_admin.module.ts',\n                // admin modules\n                { file: 'admin/configuration/_configuration.route.ts', method: 'processJs' },\n                { file: 'admin/configuration/_configuration.component.ts', method: 'processJs' },\n                { file: 'admin/configuration/_configuration.component.html', method: 'processHtml' },\n                'admin/configuration/_configuration.service.ts',\n                { file: 'admin/docs/_docs.route.ts', method: 'processJs' },\n                { file: 'admin/docs/_docs.component.ts', method: 'processJs' },\n                'admin/docs/_docs.component.html',\n                { file: 'admin/health/_health.route.ts', method: 'processJs' },\n                { file: 'admin/health/_health.component.ts', method: 'processJs' },\n                { file: 'admin/health/_health.component.html', method: 'processHtml' },\n                'admin/health/_health-modal.component.ts',\n                { file: 'admin/health/_health-modal.component.html', method: 'processHtml' },\n                'admin/health/_health.service.ts',\n                { file: 'admin/logs/_logs.route.ts', method: 'processJs' },\n                'admin/logs/_log.model.ts',\n                { file: 'admin/logs/_logs.component.ts', method: 'processJs' },\n                { file: 'admin/logs/_logs.component.html', method: 'processHtml' },\n                'admin/logs/_logs.service.ts',\n                { file: 'admin/metrics/_metrics.route.ts', method: 'processJs' },\n                { file: 'admin/metrics/_metrics.component.ts', method: 'processJs' },\n                { file: 'admin/metrics/_metrics.component.html', method: 'processHtml', template: true },\n                'admin/metrics/_metrics-modal.component.ts',\n                { file: 'admin/metrics/_metrics-modal.component.html', method: 'processHtml', template: true },\n                'admin/metrics/_metrics.service.ts'\n            ]\n        },\n        {\n            condition: generator => generator.devDatabaseType !== 'cassandra',\n            path: ANGULAR_DIR,\n            templates: [\n                { file: 'admin/audits/_audits.route.ts', method: 'processJs' },\n                'admin/audits/_audit-data.model.ts',\n                'admin/audits/_audit.model.ts',\n                { file: 'admin/audits/_audits.component.ts', method: 'processJs' },\n                { file: 'admin/audits/_audits.component.html', method: 'processHtml' },\n                'admin/audits/_audits.service.ts'\n            ]\n        },\n        {\n            condition: generator => generator.websocket === 'spring-websocket',\n            path: ANGULAR_DIR,\n            templates: [\n                { file: 'admin/tracker/_tracker.route.ts', method: 'processJs' },\n                { file: 'admin/tracker/_tracker.component.ts', method: 'processJs' },\n                { file: 'admin/tracker/_tracker.component.html', method: 'processHtml' },\n                'shared/tracker/_tracker.service.ts',\n                'shared/tracker/_window.service.ts'\n            ]\n        },\n        {\n            condition: generator => !generator.skipUserManagement,\n            path: ANGULAR_DIR,\n            templates: [\n                { file: 'admin/user-management/_user-management.route.ts', method: 'processJs' },\n                { file: 'admin/user-management/_user-management.component.ts', method: 'processJs' },\n                { file: 'admin/user-management/_user-management.component.html', method: 'processHtml' },\n                { file: 'admin/user-management/_user-management-detail.component.ts', method: 'processJs' },\n                { file: 'admin/user-management/_user-management-detail.component.html', method: 'processHtml' },\n                { file: 'admin/user-management/_user-management-dialog.component.ts', method: 'processJs' },\n                { file: 'admin/user-management/_user-management-dialog.component.html', method: 'processHtml' },\n                { file: 'admin/user-management/_user-management-delete-dialog.component.ts', method: 'processJs' },\n                { file: 'admin/user-management/_user-management-delete-dialog.component.html', method: 'processHtml' },\n                'admin/user-management/_user-modal.service.ts'\n            ]\n        },\n        {\n            condition: generator => generator.applicationType === 'gateway',\n            path: ANGULAR_DIR,\n            templates: [\n                { file: 'admin/gateway/_gateway.route.ts', method: 'processJs' },\n                'admin/gateway/_gateway-route.model.ts',\n                { file: 'admin/gateway/_gateway.component.ts', method: 'processJs' },\n                { file: 'admin/gateway/_gateway.component.html', method: 'processHtml' },\n                'admin/gateway/_gateway-routes.service.ts'\n            ]\n        }\n    ],\n    angularShared: [\n        {\n            path: ANGULAR_DIR,\n            templates: [\n                'shared/_index.ts',\n                'shared/_shared.module.ts',\n                'shared/_shared-libs.module.ts',\n                'shared/_shared-common.module.ts',\n                'shared/constants/_pagination.constants.ts',\n                // models\n                'shared/user/_account.model.ts',\n                // login\n                'shared/login/_login.component.ts',\n                { file: 'shared/login/_login.component.html', method: 'processHtml' },\n                'shared/login/_login.service.ts',\n                'shared/login/_login-modal.service.ts',\n                // alert service code\n                'shared/alert/_alert.component.ts',\n                'shared/alert/_alert-error.component.ts'\n            ]\n        },\n        {\n            condition: generator => generator.enableTranslation,\n            path: ANGULAR_DIR,\n            templates: [\n                'shared/language/_language.pipe.ts',\n                'shared/language/_language.constants.ts',\n                'shared/language/_language.helper.ts'\n            ]\n        },\n        {\n            condition: generator => !generator.skipUserManagement,\n            path: ANGULAR_DIR,\n            templates: [\n                'shared/user/_user.model.ts',\n                'shared/user/_user.service.ts'\n            ]\n        }\n    ],\n    angularAuthService: [\n        {\n            path: ANGULAR_DIR,\n            templates: [\n                'shared/auth/_auth.service.ts',\n                'shared/auth/_csrf.service.ts',\n                'shared/auth/_state-storage.service.ts',\n                'shared/auth/_principal.service.ts',\n                'shared/auth/_has-any-authority.directive.ts',\n                'shared/auth/_account.service.ts',\n                'shared/auth/_user-route-access-service.ts'\n            ]\n        },\n        {\n            condition: generator => generator.authenticationType === 'oauth2',\n            path: ANGULAR_DIR,\n            templates: [\n                'shared/auth/_auth-oauth2.service.ts'\n            ]\n        },\n        {\n            condition: generator => generator.authenticationType === 'jwt' || generator.authenticationType === 'uaa',\n            path: ANGULAR_DIR,\n            templates: [\n                'shared/auth/_auth-jwt.service.ts'\n            ]\n        },\n        {\n            condition: generator => generator.authenticationType === 'session',\n            path: ANGULAR_DIR,\n            templates: [\n                'shared/auth/_auth-session.service.ts'\n            ]\n        }\n    ],\n    clientTestFw: [\n        {\n            path: TEST_SRC_DIR,\n            templates: [\n                '_karma.conf.js',\n                'spec/_entry.ts',\n                'spec/_test.module.ts',\n                'spec/app/account/activate/_activate.component.spec.ts',\n                'spec/app/account/password/_password.component.spec.ts',\n                'spec/app/account/password/_password-strength-bar.component.spec.ts',\n                'spec/app/account/password-reset/init/_password-reset-init.component.spec.ts',\n                'spec/app/account/password-reset/finish/_password-reset-finish.component.spec.ts',\n                'spec/app/account/register/_register.component.spec.ts',\n                'spec/app/account/settings/_settings.component.spec.ts',\n                'spec/app/admin/health/_health.component.spec.ts',\n                'spec/helpers/_spyobject.ts',\n                'spec/helpers/_mock-account.service.ts',\n                'spec/helpers/_mock-principal.service.ts',\n                'spec/helpers/_mock-route.service.ts'\n            ]\n        },\n        {\n            condition: generator => generator.devDatabaseType !== 'cassandra',\n            path: TEST_SRC_DIR,\n            templates: [\n                'spec/app/admin/audits/_audits.component.spec.ts',\n            ]\n        },\n        {\n            condition: generator => generator.authenticationType === 'session',\n            path: TEST_SRC_DIR,\n            templates: [\n                'spec/app/account/sessions/_sessions.component.spec.ts',\n            ]\n        },\n        {\n            condition: generator => generator.enableTranslation,\n            path: TEST_SRC_DIR,\n            templates: [\n                'spec/helpers/_mock-language.service.ts'\n            ]\n        },\n        {\n            condition: generator => generator.websocket === 'spring-websocket',\n            path: TEST_SRC_DIR,\n            templates: [\n                'spec/helpers/_mock-tracker.service.ts'\n            ]\n        },\n        {\n            condition: generator => generator.protractorTests,\n            path: TEST_SRC_DIR,\n            templates: [\n                'e2e/account/_account.spec.ts',\n                'e2e/admin/_administration.spec.ts',\n                '_protractor.conf.js'\n            ]\n        }\n    ]\n};\n\nmodule.exports = {\n    writeFiles,\n    files\n};\n\nfunction writeFiles() {\n    mkdirp(MAIN_SRC_DIR);\n    // write angular 2.x and above files\n    this.writeFilesToDisk(files, this, false, 'angular');\n}\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/node_modules/generator-jhipster/generators/client/files-angularjs.js":"const mkdirp = require('mkdirp');\nconst constants = require('../generator-constants');\n\n/* Constants use throughout */\nconst MAIN_SRC_DIR = constants.CLIENT_MAIN_SRC_DIR;\nconst TEST_SRC_DIR = constants.CLIENT_TEST_SRC_DIR;\nconst ANGULAR_DIR = constants.ANGULAR_DIR;\n\n/**\n * The default is to use a file path string. It implies use of the template method.\n * For any other config an object { file:.., method:.., template:.. } can be used\n*/\nconst files = {\n    common: [\n        {\n            templates: [\n                '_package.json',\n                '_bower.json',\n                '_.bowerrc',\n                '_.eslintrc.json',\n                '_.eslintignore',\n                '_gulpfile.js',\n                'gulp/_utils.js',\n                'gulp/_serve.js',\n                'gulp/_config.js',\n                'gulp/_build.js',\n                'gulp/_copy.js',\n                'gulp/_inject.js'\n            ]\n        }\n    ],\n    css: [\n        // this css file will be overwritten by the sass generated css if sass is enabled\n        // but this will avoid errors when running app without running sass task first\n        {\n            path: MAIN_SRC_DIR,\n            templates: [\n                'content/css/_main.css',\n                'content/css/_documentation.css'\n            ]\n        }\n    ],\n    sass: [\n        {\n            condition: generator => generator.useSass,\n            path: MAIN_SRC_DIR,\n            templates: [\n                'scss/_main.scss',\n                'scss/_vendor.scss'\n            ]\n        }\n    ],\n    image: [\n        {\n            path: MAIN_SRC_DIR,\n            templates: [\n                { file: 'content/images/_hipster.png', method: 'copy' },\n                { file: 'content/images/_hipster2x.png', method: 'copy' },\n                { file: 'content/images/_logo-jhipster.png', method: 'copy' }\n            ]\n        }\n    ],\n    swagger: [\n        {\n            path: MAIN_SRC_DIR,\n            templates: [\n                'swagger-ui/_index.html',\n                { file: 'swagger-ui/images/_throbber.gif', method: 'copy' }\n            ]\n        }\n    ],\n    commonWeb: [\n        {\n            path: MAIN_SRC_DIR,\n            templates: [\n                { file: '_favicon.ico', method: 'copy' },\n                '_robots.txt',\n                '_404.html',\n                '_index.html'\n            ]\n        }\n    ],\n    angularApp: [\n        {\n            path: ANGULAR_DIR,\n            templates: [\n                '_app.module.js',\n                '_app.state.js',\n                '_app.constants.js',\n                'blocks/handlers/_state.handler.js',\n                'blocks/config/_alert.config.js',\n                'blocks/config/_http.config.js',\n                'blocks/config/_localstorage.config.js',\n                'blocks/config/_compile.config.js',\n                'blocks/config/_uib-pager.config.js',\n                'blocks/config/_uib-pagination.config.js',\n                'blocks/interceptor/_auth-expired.interceptor.js',\n                'blocks/interceptor/_errorhandler.interceptor.js',\n                'blocks/interceptor/_notification.interceptor.js'\n\n            ]\n        },\n        {\n            condition: generator => generator.enableTranslation,\n            path: ANGULAR_DIR,\n            templates: [\n                'blocks/handlers/_translation.handler.js',\n                'blocks/config/_translation.config.js',\n                'blocks/config/_translation-storage.provider.js'\n            ]\n        },\n        {\n            condition: generator => generator.authenticationType === 'oauth2' || generator.authenticationType === 'jwt' || generator.authenticationType === 'uaa',\n            path: ANGULAR_DIR,\n            templates: [\n                'blocks/interceptor/_auth.interceptor.js'\n            ]\n        }\n    ],\n    angularMain: [\n        {\n            path: ANGULAR_DIR,\n            templates: [\n                // entities\n                'entities/_entity.state.js',\n                // home module\n                'home/_home.controller.js',\n                { file: 'home/_home.state.js', method: 'processJs' },\n                { file: 'home/_home.html', method: 'processHtml' },\n                // layouts\n                'layouts/navbar/_navbar.controller.js',\n                'services/profiles/_profile.service.js',\n                'services/profiles/_page-ribbon.directive.js',\n                { file: 'layouts/navbar/_navbar.html', method: 'processHtml' },\n                { file: 'layouts/error/_error.html', method: 'processHtml' },\n                { file: 'layouts/error/_accessdenied.html', method: 'processHtml' },\n                { file: 'layouts/error/_error.state.js', method: 'processJs' }\n            ]\n        },\n        {\n            condition: generator => generator.enableTranslation,\n            path: ANGULAR_DIR,\n            templates: [\n                'layouts/navbar/_active-menu.directive.js'\n            ]\n        }\n    ],\n    angularAccountModule: [\n        {\n            path: ANGULAR_DIR,\n            templates: [\n                'account/_account.state.js',\n                'account/activate/_activate.controller.js',\n                { file: 'account/activate/_activate.state.js', method: 'processJs' },\n                { file: 'account/activate/_activate.html', method: 'processHtml' },\n                'account/password/_password.controller.js',\n                { file: 'account/password/_password.state.js', method: 'processJs' },\n                'account/password/_password-strength-bar.directive.js',\n                { file: 'account/password/_password.html', method: 'processHtml' },\n                'account/register/_register.controller.js',\n                { file: 'account/register/_register.state.js', method: 'processJs' },\n                { file: 'account/register/_register.html', method: 'processHtml' },\n                'account/reset/request/_reset.request.controller.js',\n                { file: 'account/reset/request/_reset.request.state.js', method: 'processJs' },\n                { file: 'account/reset/request/_reset.request.html', method: 'processHtml' },\n                'account/reset/finish/_reset.finish.controller.js',\n                { file: 'account/reset/finish/_reset.finish.html', method: 'processHtml' },\n                { file: 'account/reset/finish/_reset.finish.state.js', method: 'processJs' },\n                'account/settings/_settings.controller.js',\n                { file: 'account/settings/_settings.state.js', method: 'processJs' },\n                { file: 'account/settings/_settings.html', method: 'processHtml' }\n            ]\n        },\n        {\n            condition: generator => generator.authenticationType === 'session',\n            path: ANGULAR_DIR,\n            templates: [\n                { file: 'account/sessions/_sessions.state.js', method: 'processJs' },\n                { file: 'account/sessions/_sessions.html', method: 'processHtml' },\n                'account/sessions/_sessions.controller.js'\n            ]\n        },\n        {\n            condition: generator => generator.enableSocialSignIn,\n            path: ANGULAR_DIR,\n            templates: [\n                { file: 'account/social/directive/_social.html', method: 'processHtml' },\n                { file: 'account/social/_social-register.html', method: 'processHtml' },\n                'account/social/directive/_social.directive.js',\n                'account/social/_social-register.controller.js',\n                'account/social/_social.service.js',\n                { file: 'account/social/_social.state.js', method: 'processJs' }\n            ]\n        },\n        {\n            condition: generator => generator.enableSocialSignIn && generator.authenticationType === 'jwt',\n            path: ANGULAR_DIR,\n            templates: [\n                'account/social/_social-auth.controller.js'\n            ]\n        }\n    ],\n    angularAdminModule: [\n        {\n            path: ANGULAR_DIR,\n            templates: [\n                'admin/_admin.state.js',\n                'admin/configuration/_configuration.controller.js',\n                'admin/configuration/_configuration.service.js',\n                { file: 'admin/configuration/_configuration.state.js', method: 'processJs' },\n                { file: 'admin/configuration/_configuration.html', method: 'processHtml' },\n                'admin/health/_health.controller.js',\n                'admin/health/_health.modal.controller.js',\n                'admin/health/_health.service.js',\n                { file: 'admin/health/_health.state.js', method: 'processJs' },\n                { file: 'admin/health/_health.html', method: 'processHtml' },\n                { file: 'admin/health/_health.modal.html', method: 'processHtml' },\n                'admin/logs/_logs.controller.js',\n                'admin/logs/_logs.service.js',\n                { file: 'admin/logs/_logs.state.js', method: 'processJs' },\n                { file: 'admin/logs/_logs.html', method: 'processHtml' },\n                'admin/metrics/_metrics.controller.js',\n                'admin/metrics/_metrics.modal.controller.js',\n                'admin/metrics/_metrics.service.js',\n                { file: 'admin/metrics/_metrics.state.js', method: 'processJs' },\n                { file: 'admin/metrics/_metrics.html', method: 'processHtml', template: true },\n                { file: 'admin/metrics/_metrics.modal.html', method: 'processHtml', template: true },\n                'admin/docs/_docs.html',\n                { file: 'admin/docs/_docs.state.js', method: 'processJs' }\n            ]\n        },\n        {\n            condition: generator => generator.devDatabaseType !== 'cassandra',\n            path: ANGULAR_DIR,\n            templates: [\n                'admin/audits/_audits.controller.js',\n                'admin/audits/_audits.service.js',\n                { file: 'admin/audits/_audits.state.js', method: 'processJs' },\n                { file: 'admin/audits/_audits.html', method: 'processHtml' },\n            ]\n        },\n        {\n            condition: generator => generator.websocket === 'spring-websocket',\n            path: ANGULAR_DIR,\n            templates: [\n                { file: 'admin/tracker/_tracker.html', method: 'processHtml' },\n                { file: 'admin/tracker/_tracker.state.js', method: 'processJs' },\n                'admin/tracker/_tracker.controller.js',\n                'admin/tracker/_tracker.service.js'\n            ]\n        },\n        {\n            condition: generator => !generator.skipUserManagement,\n            path: ANGULAR_DIR,\n            templates: [\n                { file: 'admin/user-management/_user-management.html', method: 'processHtml' },\n                { file: 'admin/user-management/_user-management-detail.html', method: 'processHtml' },\n                { file: 'admin/user-management/_user-management-dialog.html', method: 'processHtml' },\n                { file: 'admin/user-management/_user-management-delete-dialog.html', method: 'processHtml' },\n                { file: 'admin/user-management/_user-management.state.js', method: 'processJs' },\n                'admin/user-management/_user-management.controller.js',\n                'admin/user-management/_user-management-detail.controller.js',\n                'admin/user-management/_user-management-dialog.controller.js',\n                'admin/user-management/_user-management-delete-dialog.controller.js'\n            ]\n        },\n        {\n            condition: generator => generator.applicationType === 'gateway',\n            path: ANGULAR_DIR,\n            templates: [\n                'admin/gateway/_gateway.controller.js',\n                'admin/gateway/_gateway-routes.service.js',\n                { file: 'admin/gateway/_gateway.state.js', method: 'processJs' },\n                { file: 'admin/gateway/_gateway.html', method: 'processHtml' }\n            ]\n        }\n    ],\n    angularSharedComponents: [\n        {\n            path: ANGULAR_DIR,\n            templates: [\n                { file: 'components/login/_login.html', method: 'processHtml' },\n                { file: 'components/login/_login.service.js', method: 'processJs' },\n                'components/login/_login.controller.js',\n                'components/form/_show-validation.directive.js',\n                'components/form/_maxbytes.directive.js',\n                'components/form/_minbytes.directive.js',\n                'components/form/_pagination.constants.js',\n                'components/util/_base64.service.js',\n                'components/util/_capitalize.filter.js',\n                'components/util/_parse-links.service.js',\n                'components/util/_truncate-characters.filter.js',\n                'components/util/_truncate-words.filter.js',\n                'components/util/_date-util.service.js',\n                'components/util/_data-util.service.js',\n                'components/util/_pagination-util.service.js',\n                'components/util/_sort.directive.js',\n                'components/util/_sort-by.directive.js',\n                'components/util/_jhi-item-count.directive.js',\n                // alert service code\n                'components/alert/_alert.service.js',\n                'components/alert/_alert.directive.js',\n                'components/alert/_alert-error.directive.js'\n            ]\n        },\n        {\n            condition: generator => generator.enableTranslation,\n            path: ANGULAR_DIR,\n            templates: [\n                'components/language/_language.filter.js',\n                'components/language/_language.constants.js',\n                'components/language/_language.controller.js',\n                'components/language/_language.service.js',\n            ]\n        }\n    ],\n    angularAuthService: [\n        {\n            path: ANGULAR_DIR,\n            templates: [\n                'services/auth/_auth.service.js',\n                'services/auth/_principal.service.js',\n                'services/auth/_has-authority.directive.js',\n                'services/auth/_has-any-authority.directive.js',\n                'services/auth/_account.service.js',\n                'services/auth/_activate.service.js',\n                'services/auth/_password.service.js',\n                'services/auth/_password-reset-init.service.js',\n                'services/auth/_password-reset-finish.service.js',\n                'services/auth/_register.service.js',\n                'services/user/_user.service.js'\n            ]\n        },\n        {\n            condition: generator => generator.authenticationType === 'oauth2',\n            path: ANGULAR_DIR,\n            templates: [\n                'services/auth/_auth.oauth2.service.js'\n            ]\n        },\n        {\n            condition: generator => generator.authenticationType === 'jwt' || generator.authenticationType === 'uaa',\n            path: ANGULAR_DIR,\n            templates: [\n                'services/auth/_auth.jwt.service.js'\n            ]\n        },\n        {\n            condition: generator => generator.authenticationType === 'session',\n            path: ANGULAR_DIR,\n            templates: [\n                'services/auth/_auth.session.service.js',\n                'services/auth/_sessions.service.js'\n            ]\n        }\n    ],\n    clientTestFw: [\n        {\n            path: TEST_SRC_DIR,\n            templates: [\n                '_karma.conf.js',\n                'spec/helpers/_module.js',\n                'spec/helpers/_httpBackend.js',\n                'spec/app/admin/health/_health.controller.spec.js',\n                'spec/app/account/password/_password.controller.spec.js',\n                'spec/app/account/password/_password-strength-bar.directive.spec.js',\n                'spec/app/account/settings/_settings.controller.spec.js',\n                'spec/app/account/activate/_activate.controller.spec.js',\n                'spec/app/account/register/_register.controller.spec.js',\n                'spec/app/account/reset/finish/_reset.finish.controller.spec.js',\n                'spec/app/account/reset/request/_reset.request.controller.spec.js',\n                'spec/app/services/auth/_auth.services.spec.js',\n                'spec/app/components/login/_login.controller.spec.js'\n            ]\n        },\n        {\n            condition: generator => generator.authenticationType === 'session',\n            path: TEST_SRC_DIR,\n            templates: [\n                'spec/app/account/sessions/_sessions.controller.spec.js'\n            ]\n        },\n        {\n            condition: generator => generator.protractorTests,\n            path: TEST_SRC_DIR,\n            templates: [\n                'e2e/account/_account.js',\n                'e2e/admin/_administration.js',\n                '_protractor.conf.js'\n            ]\n        }\n    ]\n};\n\nmodule.exports = {\n    writeFiles,\n    files\n};\n\n\nfunction writeFiles() {\n    mkdirp(MAIN_SRC_DIR);\n    this.copy('angularjs/gulp/_handle-errors.js', 'gulp/handle-errors.js'); // to avoid interpolate errors\n    // write angular 1.x files\n    this.writeFilesToDisk(files, this, false, 'angularjs');\n}\n","/home/travis/build/npmtest/node-npmtest-generator-jhipster/node_modules/generator-jhipster/generators/docker-compose/files.js":"\nmodule.exports = {\n    writeFiles\n};\n\nfunction writeFiles() {\n    return {\n        writeDockerCompose() {\n            this.template('_docker-compose.yml', 'docker-compose.yml');\n        },\n\n        writeRegistryFiles() {\n            if (this.serviceDiscoveryType === 'eureka') {\n                this.template('_jhipster-registry.yml', 'jhipster-registry.yml');\n            }\n            if (this.serviceDiscoveryType) {\n                this.template('central-server-config/_application.yml', 'central-server-config/application.yml');\n            }\n            if (this.gatewayNb === 0 && this.microserviceNb === 0) return;\n            if (this.serviceDiscoveryType === 'consul') {\n                this.template('_consul.yml', 'consul.yml');\n            }\n        },\n\n        writeKafkaFiles() {\n            if (!this.useKafka) return;\n\n            this.template('_kafka.yml', 'kafka.yml');\n        },\n\n        writeElkFiles() {\n            if (this.monitoring !== 'elk') return;\n\n            this.template('_jhipster-console.yml', 'jhipster-console.yml');\n            this.template('log-conf/_logstash.conf', 'log-conf/logstash.conf');\n            this.template('log-data/_.gitignore', 'log-data/.gitignore');\n        },\n\n        writePrometheusFiles() {\n            if (this.monitoring !== 'prometheus') return;\n\n            // Generate a list of target apps to monitor for the prometheus config\n            const appsToMonitor = [];\n            for (let i = 0; i < this.appConfigs.length; i++) {\n                appsToMonitor.push(`             - ${this.appConfigs[i].baseName}-app:${this.appConfigs[i].serverPort}`);\n            }\n\n            // Format the application target list as a YAML array\n            this.appsToMonitorList = appsToMonitor.join('\\n').replace(/'/g, '');\n\n            this.template('_prometheus.yml', 'prometheus.yml');\n            this.template('prometheus-conf/_prometheus.yml', 'prometheus-conf/prometheus.yml');\n            this.template('prometheus-conf/_alert.rules', 'prometheus-conf/alert.rules');\n            this.template('alertmanager-conf/_config.yml', 'alertmanager-conf/config.yml');\n        }\n    };\n}\n"}